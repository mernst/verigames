Graphviz has several layout tools. One of them (the one I believe to be best
suited to our needs) -- "dot" -- draws hierarchical graphs, with parent nodes
strictly above child nodes. 

The row of nodes in which a nodes lies is its "rank."
For example, the top row of nodes is rank 0 -- these nodes have no children.
Rank 1 consists only of children of rank 0
Rank 2 consists only of children of ranks 0 and 1
etc.

--------------------------------------------------------------------------------

The Flash game uses coordinates in a different format than Graphviz:

The game uses decimal coordinates with a scale such that most nodes have
roughly single-digit dimensions.

Graphviz uses both inches and points. Points are typographical points, and
there are 72 in an inch.

I'm scaling the Graphviz graph so that 1 game unit = 1 inch.

So, in summary:

1 game unit = 1 inch = 72 points.

Graphviz expresses position in points. The bottom left is the origin, with X
and Y values increasing to the right and up, respectively. The position of a
node refers to its center.

The game expresses position in game units. The top left is the origin, with X
and Y values increasing to the right and down, respectively.

--------------------------------------------------------------------------------

Preliminary graph layout algorithm:

Make invisible, weight=0 edges from the incoming node to every other node, and
to the outgoing node from every other node. This does nothing except enforce
ranking -- The incoming node is always alone in rank 0, and the outgoing node
is always alone in the last rank.

Feed the generated graph in DOT format to the "dot" tool, then parse the
coordinates of the nodes in the returned graph.

follow the following algorithm to translate the coordinates to those that the
game uses:

incoming node.pos = (0,0)
outgoing node.x = 0;

int boardHeight (points) = get the board height

for each node n

   // gives the location of the center of the node in points, using the top
   // left corner of the board as the origin
   int(points) xIn = n.DOTx
   int(points) yIn = boardHeight - n.DOTy

   int(points) width = n.DOTwidth * (72 points) / (1 inch)
   int(points) height = n.DOTheight * (72 points) / (1 inch)

   // gives the location of the top left corner of the node, using the top left
   // corner of the board as the origin
   int(points) xCorner = xIn - (width / 2)
   int(points) yCorner = yIn - (height / 2)

   n.x = xCorner / 72 // floating point division, not integer division
   n.y = yCorner / 72 // floating point division, not integer division
