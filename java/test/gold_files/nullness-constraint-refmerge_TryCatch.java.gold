Constraints:
SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 0 at class TryCatch extends type; tree <<missing tree>> within 
class TryCatch {
    
    TryCatch() {
        super();
    }
    
    void test() {
        Exception e = new Exception();
        String a = null;
        try {
            if (true) {
                throw e;
            }
            a = "";
        } catch (Exception e2) {
            a = "";
        }
        a.toString();
    }
} )

SubtypeConstraint( Variable 1 at method TryCatch#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 0 at class TryCatch extends type; tree <<missing tree>> within 
class TryCatch {
    
    TryCatch() {
        super();
    }
    
    void test() {
        Exception e = new Exception();
        String a = null;
        try {
            if (true) {
                throw e;
            }
            a = "";
        } catch (Exception e2) {
            a = "";
        }
        a.toString();
    }
} )

StubBoardUseConstraint(java.lang.Object,java.lang.Object#<init>():void,method TryCatch#<init>():V constraint position,null,List(),List(),List(),List(),List(),List(Constant(@nninf.quals.Nullable)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: method TryCatch#<init>():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@nninf.quals.Nullable)); 
)

SubtypeConstraint( Variable 2 at method TryCatch#test():V receiver; tree <<missing tree>> within 
void test() {
    Exception e = new Exception();
    String a = null;
    try {
        if (true) {
            throw e;
        }
        a = "";
    } catch (Exception e2) {
        a = "";
    }
    a.toString();
}Atm: @VarAnnot(2) TryCatch  <:  Variable 0 at class TryCatch extends type; tree <<missing tree>> within 
class TryCatch {
    
    TryCatch() {
        super();
    }
    
    void test() {
        Exception e = new Exception();
        String a = null;
        try {
            if (true) {
                throw e;
            }
            a = "";
        } catch (Exception e2) {
            a = "";
        }
        a.toString();
    }
} )

StubBoardUseConstraint(java.lang.Exception,java.lang.Exception#<init>():void,method TryCatch#test():V constraint position,null,List(),List(),List(),List(),List(),List(Constant(@nninf.quals.Nullable)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: method TryCatch#test():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@nninf.quals.Nullable)); 
)

InequalityConstraint( context: method TryCatch#test():V constraint position, Variable 4 at method TryCatch#test():V creation 0; tree Exception != Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Variable 4 at method TryCatch#test():V creation 0; tree Exception  <:  Variable 3 at method TryCatch#test():V local variable e(0); tree Exception )

SubtypeConstraint( Literal(NULL_LITERAL, "null")  <:  Variable 5 at method TryCatch#test():V local variable a(0); tree String )

InequalityConstraint( context: method TryCatch#test():V constraint position, Variable 3 at method TryCatch#test():V local variable e(0); tree Exception != Constant(@nninf.quals.Nullable) )

InequalityConstraint( context: method TryCatch#test():V constraint position, Constant(@nninf.quals.NonNull) != Constant(@nninf.quals.Nullable) )

EqualityConstraint( RefinementVariable #6 Declared Variable: Variable 5 at method TryCatch#test():V local variable a(0); tree String IfTest: false mergedTo: (Set(8 )) = Literal(STRING_LITERAL, "") )

SubtypeConstraint( Literal(STRING_LITERAL, "")  <:  Variable 5 at method TryCatch#test():V local variable a(0); tree String )

EqualityConstraint( RefinementVariable #7 Declared Variable: Variable 5 at method TryCatch#test():V local variable a(0); tree String IfTest: false mergedTo: (Set(8 )) = Literal(STRING_LITERAL, "") )

SubtypeConstraint( RefinementVariable #6 Declared Variable: Variable 5 at method TryCatch#test():V local variable a(0); tree String IfTest: false mergedTo: (Set(8 ))  <:  RefinementVariable #8 Declared Variable: Variable 5 at method TryCatch#test():V local variable a(0); tree String IfTest: false mergedTo: (Set()) )

SubtypeConstraint( RefinementVariable #7 Declared Variable: Variable 5 at method TryCatch#test():V local variable a(0); tree String IfTest: false mergedTo: (Set(8 ))  <:  RefinementVariable #8 Declared Variable: Variable 5 at method TryCatch#test():V local variable a(0); tree String IfTest: false mergedTo: (Set()) )

SubtypeConstraint( RefinementVariable #8 Declared Variable: Variable 5 at method TryCatch#test():V local variable a(0); tree String IfTest: false mergedTo: (Set())  <:  Variable 5 at method TryCatch#test():V local variable a(0); tree String )

InequalityConstraint( context: method TryCatch#test():V constraint position, RefinementVariable #8 Declared Variable: Variable 5 at method TryCatch#test():V local variable a(0); tree String IfTest: false mergedTo: (Set()) != Constant(@nninf.quals.Nullable) )

StubBoardUseConstraint(java.lang.String,java.lang.String#toString():java.lang.String,method TryCatch#test():V constraint position,Constant(@nninf.quals.NonNull),List(),List(),List(),List(),List(),List(Constant(@nninf.quals.NonNull)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: method TryCatch#test():V constraint position; 
calledVp: None; 
receiver: RefinementVariable #8 Declared Variable: Variable 5 at method TryCatch#test():V local variable a(0); tree String IfTest: false mergedTo: (Set()); 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@nninf.quals.NonNull)); 
)

