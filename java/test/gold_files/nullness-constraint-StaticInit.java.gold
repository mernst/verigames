Constraints:
SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 0 at class StaticInit extends type; tree <<missing tree>> within 
class StaticInit {
    
    StaticInit() {
        super();
    }
    static Object f;
    static {
        f = new Object();
    }
} )

SubtypeConstraint( Variable 3 at method StaticInit#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 0 at class StaticInit extends type; tree <<missing tree>> within 
class StaticInit {
    
    StaticInit() {
        super();
    }
    static Object f;
    static {
        f = new Object();
    }
} )

checkers.inference.FieldAccessConstraint(
contextVp: class StaticInit static initializer *0 constraint position; 
calledVp: class StaticInit static field f; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 1 at class StaticInit static field f; tree Object); 
)

InequalityConstraint( context: class StaticInit static initializer *0 constraint position, Variable 2 at class StaticInit static initializer *0 creation 0; tree Object != Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Variable 2 at class StaticInit static initializer *0 creation 0; tree Object  <:  Variable 1 at class StaticInit static field f; tree Object )

checkers.inference.FieldAssignmentConstraint(
contextVp: class StaticInit static initializer *0 constraint position; 
calledVp: class StaticInit static field f; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: ( Variable 2 at class StaticInit static initializer *0 creation 0; tree Object ); 
result: List(); 
)

