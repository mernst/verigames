Constraints:
SubtypeConstraint( Variable 1 at class GenericInterface class type parameter 0; tree T extends Object  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 1 at class GenericInterface class type parameter 0; tree T extends Object  <:  Variable 0 at class GenericInterface class type parameter bound 0 & 0; tree Object at position ((3,0)) within T extends Object )

SubtypeConstraint( Variable 6 at class GenericArray class type parameter 0; tree Z extends Object  <:  Variable 5 at class GenericArray class type parameter bound 0 & 0; tree Object at position ((3,0)) within Z extends Object )

SubtypeConstraint( Constant(@trusted.quals.Untrusted)  <:  Variable 7 at class GenericArray extends type; tree <<missing tree>> within 
class GenericArray<Z extends Object> implements GenericInterface<String[]> {
    
    GenericArray() {
        super();
    }
    private Z z;
    
    public void setZ(Z z) {
        this.z = z;
    }
    
    public String[] map(String[] toMap) {
        return toMap;
    }
} )

SubtypeConstraint( Variable 11 at method GenericArray#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 7 at class GenericArray extends type; tree <<missing tree>> within 
class GenericArray<Z extends Object> implements GenericInterface<String[]> {
    
    GenericArray() {
        super();
    }
    private Z z;
    
    public void setZ(Z z) {
        this.z = z;
    }
    
    public String[] map(String[] toMap) {
        return toMap;
    }
} )

SubtypeConstraint( Variable 19 at class GenericArray field z; tree Z  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 12 at method GenericArray#setZ(Ljava/lang/Object;):V receiver; tree <<missing tree>> within 
public void setZ(Z z) {
    this.z = z;
}Atm: @VarAnnot(12) GenericArray<Z extends Object>  <:  Variable 7 at class GenericArray extends type; tree <<missing tree>> within 
class GenericArray<Z extends Object> implements GenericInterface<String[]> {
    
    GenericArray() {
        super();
    }
    private Z z;
    
    public void setZ(Z z) {
        this.z = z;
    }
    
    public String[] map(String[] toMap) {
        return toMap;
    }
} )

SubtypeConstraint( Variable 6 at class GenericArray class type parameter 0; tree Z extends Object  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 6 at class GenericArray class type parameter 0; tree Z extends Object  <:  Variable 19 at class GenericArray field z; tree Z )

checkers.inference.FieldAssignmentConstraint(
contextVp: method GenericArray#setZ(Ljava/lang/Object;):V constraint position; 
calledVp: class GenericArray field z; 
receiver: Variable 12 at method GenericArray#setZ(Ljava/lang/Object;):V receiver; tree <<missing tree>> within 
public void setZ(Z z) {
    this.z = z;
}Atm: @VarAnnot(12) GenericArray<Z extends Object>; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Variable 6 at class GenericArray class type parameter 0; tree Z extends Object >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 5 at class GenericArray class type parameter bound 0 & 0; tree Object at position ((3,0)) within Z extends Object) >; 
args: ( Variable 6 at class GenericArray class type parameter 0; tree Z extends Object ); 
result: List(); 
)

SubtypeConstraint( Variable 16 at method GenericArray#map([Ljava/lang/String;):[Ljava/lang/String; receiver; tree <<missing tree>> within 
public String[] map(String[] toMap) {
    return toMap;
}Atm: @VarAnnot(16) GenericArray<Z extends Object>  <:  Variable 7 at class GenericArray extends type; tree <<missing tree>> within 
class GenericArray<Z extends Object> implements GenericInterface<String[]> {
    
    GenericArray() {
        super();
    }
    private Z z;
    
    public void setZ(Z z) {
        this.z = z;
    }
    
    public String[] map(String[] toMap) {
        return toMap;
    }
} )

SubtypeConstraint( Variable 2 at method GenericInterface#map(Ljava/lang/Object;):Ljava/lang/Object; return type; tree T  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 4 at method GenericInterface#map(Ljava/lang/Object;):Ljava/lang/Object; parameter 0; tree T  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 14 at method GenericArray#map([Ljava/lang/String;):[Ljava/lang/String; return type; tree String[]  <:  Variable 2 at method GenericInterface#map(Ljava/lang/Object;):Ljava/lang/Object; return type; tree T )

SubtypeConstraint( Variable 15 at method GenericArray#map([Ljava/lang/String;):[Ljava/lang/String; return type; tree String at position ((0,0)) within String[]  <:  Variable 10 at class GenericArray implements type 0; tree String at position ((3,0), (0,0)) within GenericInterface<String[]> )

SubtypeConstraint( Variable 4 at method GenericInterface#map(Ljava/lang/Object;):Ljava/lang/Object; parameter 0; tree T  <:  Variable 17 at method GenericArray#map([Ljava/lang/String;):[Ljava/lang/String; parameter 0; tree String[] )

SubtypeConstraint( Variable 10 at class GenericArray implements type 0; tree String at position ((3,0), (0,0)) within GenericInterface<String[]>  <:  Variable 18 at method GenericArray#map([Ljava/lang/String;):[Ljava/lang/String; parameter 0; tree String at position ((0,0)) within String[] )

SubtypeConstraint( Variable 17 at method GenericArray#map([Ljava/lang/String;):[Ljava/lang/String; parameter 0; tree String[]  <:  Variable 14 at method GenericArray#map([Ljava/lang/String;):[Ljava/lang/String; return type; tree String[] )

SubtypeConstraint( Variable 18 at method GenericArray#map([Ljava/lang/String;):[Ljava/lang/String; parameter 0; tree String at position ((0,0)) within String[]  <:  Variable 15 at method GenericArray#map([Ljava/lang/String;):[Ljava/lang/String; return type; tree String at position ((0,0)) within String[] )

SubtypeConstraint( Constant(@trusted.quals.Untrusted)  <:  Variable 20 at class GenericFields extends type; tree <<missing tree>> within 
class GenericFields {
    
    GenericFields() {
        super();
    }
    private GenericArray<String> genArray;
} )

SubtypeConstraint( Variable 21 at method GenericFields#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 20 at class GenericFields extends type; tree <<missing tree>> within 
class GenericFields {
    
    GenericFields() {
        super();
    }
    private GenericArray<String> genArray;
} )

