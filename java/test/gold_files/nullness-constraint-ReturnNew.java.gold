Constraints:
subtype constraint: Constant(@nninf.quals.Nullable)  <:  Variable 0 at class ReturnNew extends type; tree <<missing tree>> within 
class ReturnNew {
    
    ReturnNew() {
        super();
    }
    
    void foo() {
        Object c = m();
    }
    
    Object m() {
        return new Object();
    }
}

subtype constraint: Variable 1 at method ReturnNew#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 0 at class ReturnNew extends type; tree <<missing tree>> within 
class ReturnNew {
    
    ReturnNew() {
        super();
    }
    
    void foo() {
        Object c = m();
    }
    
    Object m() {
        return new Object();
    }
}

subtype constraint: Variable 2 at method ReturnNew#foo():V receiver; tree <<missing tree>> within 
void foo() {
    Object c = m();
}Atm: @VarAnnot(2) ReturnNew  <:  Variable 0 at class ReturnNew extends type; tree <<missing tree>> within 
class ReturnNew {
    
    ReturnNew() {
        super();
    }
    
    void foo() {
        Object c = m();
    }
    
    Object m() {
        return new Object();
    }
}

checkers.inference.InstanceMethodCallConstraint(
contextVp: method ReturnNew#foo():V constraint position; 
calledVp: method ReturnNew#m():Ljava/lang/Object;; 
receiver: Variable 2 at method ReturnNew#foo():V receiver; tree <<missing tree>> within 
void foo() {
    Object c = m();
}Atm: @VarAnnot(2) ReturnNew; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 3 at method ReturnNew#m():Ljava/lang/Object; return type; tree Object); 
)

subtype constraint: Variable 3 at method ReturnNew#m():Ljava/lang/Object; return type; tree Object  <:  Variable 5 at method ReturnNew#foo():V local variable c(0); tree Object

subtype constraint: Variable 4 at method ReturnNew#m():Ljava/lang/Object; receiver; tree <<missing tree>> within 
Object m() {
    return new Object();
}Atm: @VarAnnot(4) ReturnNew  <:  Variable 0 at class ReturnNew extends type; tree <<missing tree>> within 
class ReturnNew {
    
    ReturnNew() {
        super();
    }
    
    void foo() {
        Object c = m();
    }
    
    Object m() {
        return new Object();
    }
}

inequality constraint at method ReturnNew#m():Ljava/lang/Object; constraint position: Variable 6 at method ReturnNew#m():Ljava/lang/Object; creation 0; tree Object != Constant(@nninf.quals.Nullable)

subtype constraint: Variable 6 at method ReturnNew#m():Ljava/lang/Object; creation 0; tree Object  <:  Variable 3 at method ReturnNew#m():Ljava/lang/Object; return type; tree Object

