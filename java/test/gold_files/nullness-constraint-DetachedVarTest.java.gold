Constraints:
SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 0 at class DetachedVarTest extends type; tree <<missing tree>> within 
class DetachedVarTest {
    
    DetachedVarTest() {
        super();
    }
    
    public DetachedVarTest[] test() {
        return null;
    }
} )

SubtypeConstraint( Variable 1 at method DetachedVarTest#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 0 at class DetachedVarTest extends type; tree <<missing tree>> within 
class DetachedVarTest {
    
    DetachedVarTest() {
        super();
    }
    
    public DetachedVarTest[] test() {
        return null;
    }
} )

StubBoardUseConstraint(java.lang.Object,java.lang.Object#<init>():void,method DetachedVarTest#<init>():V constraint position,null,List(),List(),List(),List(),List(),List(Constant(@nninf.quals.Nullable)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: method DetachedVarTest#<init>():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@nninf.quals.Nullable)); 
)

SubtypeConstraint( Variable 4 at method DetachedVarTest#test():[LDetachedVarTest; receiver; tree <<missing tree>> within 
public DetachedVarTest[] test() {
    return null;
}Atm: @VarAnnot(4) DetachedVarTest  <:  Variable 0 at class DetachedVarTest extends type; tree <<missing tree>> within 
class DetachedVarTest {
    
    DetachedVarTest() {
        super();
    }
    
    public DetachedVarTest[] test() {
        return null;
    }
} )

SubtypeConstraint( Literal(NULL_LITERAL, "null")  <:  Variable 2 at method DetachedVarTest#test():[LDetachedVarTest; return type; tree DetachedVarTest[] )

SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 5 at class DetachedVarAccess extends type; tree <<missing tree>> within 
class DetachedVarAccess {
    
    DetachedVarAccess() {
        super();
    }
    
    private void method(DetachedVarTest dt) {
        for (final DetachedVarTest dvt : dt.test()) {
            System.out.println(dvt);
        }
    }
} )

SubtypeConstraint( Variable 6 at method DetachedVarAccess#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 5 at class DetachedVarAccess extends type; tree <<missing tree>> within 
class DetachedVarAccess {
    
    DetachedVarAccess() {
        super();
    }
    
    private void method(DetachedVarTest dt) {
        for (final DetachedVarTest dvt : dt.test()) {
            System.out.println(dvt);
        }
    }
} )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method DetachedVarAccess#<init>():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@nninf.quals.Nullable)); 
)

SubtypeConstraint( Variable 7 at method DetachedVarAccess#method(LDetachedVarTest;):V receiver; tree <<missing tree>> within 
private void method(DetachedVarTest dt) {
    for (final DetachedVarTest dvt : dt.test()) {
        System.out.println(dvt);
    }
}Atm: @VarAnnot(7) DetachedVarAccess  <:  Variable 5 at class DetachedVarAccess extends type; tree <<missing tree>> within 
class DetachedVarAccess {
    
    DetachedVarAccess() {
        super();
    }
    
    private void method(DetachedVarTest dt) {
        for (final DetachedVarTest dvt : dt.test()) {
            System.out.println(dvt);
        }
    }
} )

InequalityConstraint( context: method DetachedVarAccess#method(LDetachedVarTest;):V constraint position, Variable 8 at method DetachedVarAccess#method(LDetachedVarTest;):V parameter 0; tree DetachedVarTest != Constant(@nninf.quals.Nullable) )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method DetachedVarAccess#method(LDetachedVarTest;):V constraint position; 
calledVp: Some(method DetachedVarTest#test():[LDetachedVarTest;); 
receiver: Variable 8 at method DetachedVarAccess#method(LDetachedVarTest;):V parameter 0; tree DetachedVarTest; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 2 at method DetachedVarTest#test():[LDetachedVarTest; return type; tree DetachedVarTest[], Variable 3 at method DetachedVarTest#test():[LDetachedVarTest; return type; tree DetachedVarTest at position ((0,0)) within DetachedVarTest[]); 
)

InequalityConstraint( context: method DetachedVarAccess#method(LDetachedVarTest;):V constraint position, Constant(@nninf.quals.NonNull) != Constant(@nninf.quals.Nullable) )

StubBoardUseConstraint(java.io.PrintStream,java.io.PrintStream#println(java.lang.Object):void,method DetachedVarAccess#method(LDetachedVarTest;):V constraint position,Constant(@nninf.quals.NonNull),List(),List(),List(),List(),List(Constant(@nninf.quals.Nullable)),List())

checkers.inference.InstanceMethodCallConstraint(
contextVp: method DetachedVarAccess#method(LDetachedVarTest;):V constraint position; 
calledVp: None; 
receiver: Constant(@nninf.quals.NonNull); 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: ( Variable 9 at method DetachedVarAccess#method(LDetachedVarTest;):V local variable dvt(0); tree DetachedVarTest ); 
result: List(); 
)

SubtypeConstraint( Variable 3 at method DetachedVarTest#test():[LDetachedVarTest; return type; tree DetachedVarTest at position ((0,0)) within DetachedVarTest[]  <:  Variable 9 at method DetachedVarAccess#method(LDetachedVarTest;):V local variable dvt(0); tree DetachedVarTest )

InequalityConstraint( context: method DetachedVarAccess#method(LDetachedVarTest;):V constraint position, Variable 2 at method DetachedVarTest#test():[LDetachedVarTest; return type; tree DetachedVarTest[] != Constant(@nninf.quals.Nullable) )

