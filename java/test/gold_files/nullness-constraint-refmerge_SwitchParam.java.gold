Constraints:
EqualityConstraint( Variable 4 at method Switch#test(Ljava/lang/String;):V local variable i(0); tree int = Constant(@nninf.quals.NonNull) )

SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 0 at class Switch extends type; tree <<missing tree>> within 
class Switch {
    
    Switch() {
        super();
    }
    
    void test(String a) {
        int i = 1;
        switch (i) {
        case 1: 
            a = "";
            break;
        
        case 2: 
            a = "";
            break;
        
        }
        a.toString();
    }
} )

SubtypeConstraint( Variable 1 at method Switch#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 0 at class Switch extends type; tree <<missing tree>> within 
class Switch {
    
    Switch() {
        super();
    }
    
    void test(String a) {
        int i = 1;
        switch (i) {
        case 1: 
            a = "";
            break;
        
        case 2: 
            a = "";
            break;
        
        }
        a.toString();
    }
} )

StubBoardUseConstraint(java.lang.Object,java.lang.Object#<init>():void,method Switch#<init>():V constraint position,null,List(),List(),List(),List(),List(),List(Constant(@nninf.quals.Nullable)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: method Switch#<init>():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@nninf.quals.Nullable)); 
)

SubtypeConstraint( Variable 2 at method Switch#test(Ljava/lang/String;):V receiver; tree <<missing tree>> within 
void test(String a) {
    int i = 1;
    switch (i) {
    case 1: 
        a = "";
        break;
    
    case 2: 
        a = "";
        break;
    
    }
    a.toString();
}Atm: @VarAnnot(2) Switch  <:  Variable 0 at class Switch extends type; tree <<missing tree>> within 
class Switch {
    
    Switch() {
        super();
    }
    
    void test(String a) {
        int i = 1;
        switch (i) {
        case 1: 
            a = "";
            break;
        
        case 2: 
            a = "";
            break;
        
        }
        a.toString();
    }
} )

SubtypeConstraint( Constant(@nninf.quals.NonNull)  <:  Variable 4 at method Switch#test(Ljava/lang/String;):V local variable i(0); tree int )

EqualityConstraint( RefinementVariable #7 Declared Variable: Variable 3 at method Switch#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: (Set(8 )) = Literal(STRING_LITERAL, "") )

SubtypeConstraint( Literal(STRING_LITERAL, "")  <:  Variable 3 at method Switch#test(Ljava/lang/String;):V parameter 0; tree String )

EqualityConstraint( RefinementVariable #5 Declared Variable: Variable 3 at method Switch#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: (Set(6 )) = Literal(STRING_LITERAL, "") )

InequalityConstraint( context: method Switch#test(Ljava/lang/String;):V constraint position, Variable 4 at method Switch#test(Ljava/lang/String;):V local variable i(0); tree int != Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Variable 3 at method Switch#test(Ljava/lang/String;):V parameter 0; tree String  <:  RefinementVariable #6 Declared Variable: Variable 3 at method Switch#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: (Set(8 )) )

SubtypeConstraint( RefinementVariable #5 Declared Variable: Variable 3 at method Switch#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: (Set(6 ))  <:  RefinementVariable #6 Declared Variable: Variable 3 at method Switch#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: (Set(8 )) )

SubtypeConstraint( RefinementVariable #6 Declared Variable: Variable 3 at method Switch#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: (Set(8 ))  <:  RefinementVariable #8 Declared Variable: Variable 3 at method Switch#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: (Set()) )

SubtypeConstraint( RefinementVariable #7 Declared Variable: Variable 3 at method Switch#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: (Set(8 ))  <:  RefinementVariable #8 Declared Variable: Variable 3 at method Switch#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: (Set()) )

SubtypeConstraint( RefinementVariable #8 Declared Variable: Variable 3 at method Switch#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: (Set())  <:  Variable 3 at method Switch#test(Ljava/lang/String;):V parameter 0; tree String )

InequalityConstraint( context: method Switch#test(Ljava/lang/String;):V constraint position, RefinementVariable #8 Declared Variable: Variable 3 at method Switch#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: (Set()) != Constant(@nninf.quals.Nullable) )

StubBoardUseConstraint(java.lang.String,java.lang.String#toString():java.lang.String,method Switch#test(Ljava/lang/String;):V constraint position,Constant(@nninf.quals.NonNull),List(),List(),List(),List(),List(),List(Constant(@nninf.quals.NonNull)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: method Switch#test(Ljava/lang/String;):V constraint position; 
calledVp: None; 
receiver: RefinementVariable #8 Declared Variable: Variable 3 at method Switch#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: (Set()); 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@nninf.quals.NonNull)); 
)

