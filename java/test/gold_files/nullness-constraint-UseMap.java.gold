Constraints:
SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 0 at class UseMap extends type; tree <<missing tree>> within 
class UseMap {
    
    UseMap() {
        super();
    }
    Map<String, String> sm = new HashMap<String, String>();
    
    void m() {
        sm.put("ha!", "val");
        String s = sm.get("xxx");
    }
} )

SubtypeConstraint( Variable 7 at method UseMap#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 0 at class UseMap extends type; tree <<missing tree>> within 
class UseMap {
    
    UseMap() {
        super();
    }
    Map<String, String> sm = new HashMap<String, String>();
    
    void m() {
        sm.put("ha!", "val");
        String s = sm.get("xxx");
    }
} )

StubBoardUseConstraint(java.lang.Object,java.lang.Object#<init>():void,method UseMap#<init>():V constraint position,null,List(),List(),List(),List(),List(),List(Constant(@nninf.quals.Nullable)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: method UseMap#<init>():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@nninf.quals.Nullable)); 
)

StubBoardUseConstraint(java.util.HashMap,java.util.HashMap#<init>():void,class UseMap field sm constraint position,null,List(),List(Constant(@nninf.quals.Nullable), Constant(@nninf.quals.Nullable)),List(),List(List(Constant(@nninf.quals.NonNull)), List(Constant(@nninf.quals.NonNull))),List(),List(Constant(@nninf.quals.Nullable)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: class UseMap field sm constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Constant(@nninf.quals.Nullable), Constant(@nninf.quals.Nullable) >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 2 at class UseMap field sm creation 0; tree String at position ((3,0)) within HashMap<String, String>), List(Variable 3 at class UseMap field sm creation 0; tree String at position ((3,1)) within HashMap<String, String>) >; 
args: (  ); 
result: List(Constant(@nninf.quals.Nullable)); 
)

InequalityConstraint( context: class UseMap field sm constraint position, Variable 1 at class UseMap field sm creation 0; tree HashMap within HashMap<String, String> != Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Variable 1 at class UseMap field sm creation 0; tree HashMap within HashMap<String, String>  <:  Variable 4 at class UseMap field sm; tree Map within Map<String, String> )

EqualityConstraint( Variable 5 at class UseMap field sm; tree String at position ((3,0)) within Map<String, String> = Variable 2 at class UseMap field sm creation 0; tree String at position ((3,0)) within HashMap<String, String> )

EqualityConstraint( Variable 6 at class UseMap field sm; tree String at position ((3,1)) within Map<String, String> = Variable 3 at class UseMap field sm creation 0; tree String at position ((3,1)) within HashMap<String, String> )

SubtypeConstraint( Variable 8 at method UseMap#m():V receiver; tree <<missing tree>> within 
void m() {
    sm.put("ha!", "val");
    String s = sm.get("xxx");
}Atm: @VarAnnot(8) UseMap  <:  Variable 0 at class UseMap extends type; tree <<missing tree>> within 
class UseMap {
    
    UseMap() {
        super();
    }
    Map<String, String> sm = new HashMap<String, String>();
    
    void m() {
        sm.put("ha!", "val");
        String s = sm.get("xxx");
    }
} )

checkers.inference.FieldAccessConstraint(
contextVp: method UseMap#m():V constraint position; 
calledVp: Some(class UseMap field sm); 
receiver: Variable 8 at method UseMap#m():V receiver; tree <<missing tree>> within 
void m() {
    sm.put("ha!", "val");
    String s = sm.get("xxx");
}Atm: @VarAnnot(8) UseMap; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 4 at class UseMap field sm; tree Map within Map<String, String>, Variable 5 at class UseMap field sm; tree String at position ((3,0)) within Map<String, String>, Variable 6 at class UseMap field sm; tree String at position ((3,1)) within Map<String, String>); 
)

InequalityConstraint( context: method UseMap#m():V constraint position, Variable 4 at class UseMap field sm; tree Map within Map<String, String> != Constant(@nninf.quals.Nullable) )

StubBoardUseConstraint(java.util.Map,java.util.Map#put(KV):V,method UseMap#m():V constraint position,Constant(@nninf.quals.NonNull),List(),List(Constant(@nninf.quals.Nullable), Constant(@nninf.quals.Nullable)),List(),List(List(Constant(@nninf.quals.NonNull)), List(Constant(@nninf.quals.NonNull))),List(Constant(@nninf.quals.NonNull), Constant(@nninf.quals.NonNull)),List(Constant(@nninf.quals.Nullable)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: method UseMap#m():V constraint position; 
calledVp: None; 
receiver: Variable 4 at class UseMap field sm; tree Map within Map<String, String>; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Constant(@nninf.quals.Nullable), Constant(@nninf.quals.Nullable) >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 5 at class UseMap field sm; tree String at position ((3,0)) within Map<String, String>), List(Variable 6 at class UseMap field sm; tree String at position ((3,1)) within Map<String, String>) >; 
args: ( Literal(STRING_LITERAL, "ha!"), Literal(STRING_LITERAL, "val") ); 
result: List(Constant(@nninf.quals.Nullable)); 
)

SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 10 at method UseMap#m():V local variable s(0); tree String )

