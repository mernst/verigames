Constraints:
SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 0 at class SimplestField extends type; tree <<missing tree>> within 
class SimplestField {
    
    SimplestField() {
        super();
    }
    @Nullable()
    private String s;
    
    public void s() {
        final String s2 = "a";
        s = s2;
    }
} )

SubtypeConstraint( Variable 1 at method SimplestField#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 0 at class SimplestField extends type; tree <<missing tree>> within 
class SimplestField {
    
    SimplestField() {
        super();
    }
    @Nullable()
    private String s;
    
    public void s() {
        final String s2 = "a";
        s = s2;
    }
} )

SubtypeConstraint( Variable 2 at method SimplestField#s():V receiver; tree <<missing tree>> within 
public void s() {
    final String s2 = "a";
    s = s2;
}Atm: @VarAnnot(2) SimplestField  <:  Variable 0 at class SimplestField extends type; tree <<missing tree>> within 
class SimplestField {
    
    SimplestField() {
        super();
    }
    @Nullable()
    private String s;
    
    public void s() {
        final String s2 = "a";
        s = s2;
    }
} )

SubtypeConstraint( Literal(STRING_LITERAL, "a")  <:  Variable 4 at method SimplestField#s():V local variable s2(0); tree String )

checkers.inference.FieldAccessConstraint(
contextVp: method SimplestField#s():V constraint position; 
calledVp: class SimplestField field s; 
receiver: Variable 2 at method SimplestField#s():V receiver; tree <<missing tree>> within 
public void s() {
    final String s2 = "a";
    s = s2;
}Atm: @VarAnnot(2) SimplestField; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 3 at class SimplestField field s; tree String); 
)

SubtypeConstraint( Variable 4 at method SimplestField#s():V local variable s2(0); tree String  <:  Variable 3 at class SimplestField field s; tree String )

checkers.inference.FieldAssignmentConstraint(
contextVp: method SimplestField#s():V constraint position; 
calledVp: class SimplestField field s; 
receiver: Variable 2 at method SimplestField#s():V receiver; tree <<missing tree>> within 
public void s() {
    final String s2 = "a";
    s = s2;
}Atm: @VarAnnot(2) SimplestField; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: ( Variable 4 at method SimplestField#s():V local variable s2(0); tree String ); 
result: List(); 
)

