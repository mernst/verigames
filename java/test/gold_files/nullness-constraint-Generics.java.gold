Constraints:
subtype constraint: Constant(@nninf.quals.Nullable)  <:  Variable 0 at class Generics extends type; tree <<missing tree>> within 
class Generics {
    
    Generics() {
        super();
    }
    
    void foo() {
        Map<String, Object> map = new HashMap<String, Object>();
    }
}

subtype constraint: Variable 1 at method Generics#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 0 at class Generics extends type; tree <<missing tree>> within 
class Generics {
    
    Generics() {
        super();
    }
    
    void foo() {
        Map<String, Object> map = new HashMap<String, Object>();
    }
}

subtype constraint: Variable 2 at method Generics#foo():V receiver; tree <<missing tree>> within 
void foo() {
    Map<String, Object> map = new HashMap<String, Object>();
}Atm: @VarAnnot(2) Generics  <:  Variable 0 at class Generics extends type; tree <<missing tree>> within 
class Generics {
    
    Generics() {
        super();
    }
    
    void foo() {
        Map<String, Object> map = new HashMap<String, Object>();
    }
}

inequality constraint at method Generics#foo():V constraint position: Variable 6 at method Generics#foo():V creation 0; tree HashMap within HashMap<String, Object> != Constant(@nninf.quals.Nullable)

subtype constraint: Variable 6 at method Generics#foo():V creation 0; tree HashMap within HashMap<String, Object>  <:  Variable 3 at method Generics#foo():V local variable map(0); tree Map within Map<String, Object>

equality constraint: Variable 4 at method Generics#foo():V local variable map(0); tree String at position ((3,0)) within Map<String, Object> = Variable 7 at method Generics#foo():V creation 0; tree String at position ((3,0)) within HashMap<String, Object>

equality constraint: Variable 5 at method Generics#foo():V local variable map(0); tree Object at position ((3,1)) within Map<String, Object> = Variable 8 at method Generics#foo():V creation 0; tree Object at position ((3,1)) within HashMap<String, Object>

