Constraints:
SubtypeConstraint( Variable 1 at class MyClass class type parameter 0; tree T extends Object  <:  Variable 0 at class MyClass class type parameter bound 0 & 0; tree Object at position ((3,0)) within T extends Object )

SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 2 at class MyClass extends type; tree Object )

SubtypeConstraint( Variable 3 at method MyClass#<init>(Ljava/lang/String;):V return type; tree 
<init>(String s) {
    super();
}  <:  Variable 2 at class MyClass extends type; tree Object )

SubtypeConstraint( Variable 5 at method MyClass#m(Ljava/lang/Object;):V receiver; tree MyClass<T>  <:  Variable 2 at class MyClass extends type; tree Object )

SubtypeConstraint( Variable 7 at method MyClass#context():V receiver; tree <<missing tree>> within 
void context() {
    String s = "non null";
    MyClass<String> myc;
    myc = new MyClass<String>(s);
    myc.m(s);
}Atm: @VarAnnot(7) MyClass<T extends Object>  <:  Variable 2 at class MyClass extends type; tree Object )

SubtypeConstraint( Literal(STRING_LITERAL, "non null")  <:  Variable 8 at method MyClass#context():V local variable s(0); tree String )

SubtypeConstraint( Variable 8 at method MyClass#context():V local variable s(0); tree String  <:  Variable 4 at method MyClass#<init>(Ljava/lang/String;):V parameter 0; tree String )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method MyClass#context():V constraint position; 
calledVp: method MyClass#<init>(Ljava/lang/String;):V; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Variable 1 at class MyClass class type parameter 0; tree T extends Object >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 12 at method MyClass#context():V creation 0; tree String at position ((3,0)) within MyClass<String>) >; 
args: ( Variable 8 at method MyClass#context():V local variable s(0); tree String ); 
result: List(Variable 3 at method MyClass#<init>(Ljava/lang/String;):V return type; tree 
<init>(String s) {
    super();
}); 
)

InequalityConstraint( context: method MyClass#context():V constraint position, Variable 11 at method MyClass#context():V creation 0; tree MyClass within MyClass<String> != Constant(@nninf.quals.Nullable) )

EqualityConstraint( RefinementVariable #13 Declared Variable: Variable 9 at method MyClass#context():V local variable myc(0); tree MyClass within MyClass<String> IfTest: false mergedTo: Set() = Variable 11 at method MyClass#context():V creation 0; tree MyClass within MyClass<String> )

SubtypeConstraint( Variable 11 at method MyClass#context():V creation 0; tree MyClass within MyClass<String>  <:  Variable 9 at method MyClass#context():V local variable myc(0); tree MyClass within MyClass<String> )

SubtypeConstraint( RefinementVariable #13 Declared Variable: Variable 9 at method MyClass#context():V local variable myc(0); tree MyClass within MyClass<String> IfTest: false mergedTo: Set()  <:  Variable 9 at method MyClass#context():V local variable myc(0); tree MyClass within MyClass<String> )

InequalityConstraint( context: method MyClass#context():V constraint position, RefinementVariable #13 Declared Variable: Variable 9 at method MyClass#context():V local variable myc(0); tree MyClass within MyClass<String> IfTest: false mergedTo: Set() != Constant(@nninf.quals.Nullable) )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method MyClass#context():V constraint position; 
calledVp: method MyClass#m(Ljava/lang/Object;):V; 
receiver: RefinementVariable #13 Declared Variable: Variable 9 at method MyClass#context():V local variable myc(0); tree MyClass within MyClass<String> IfTest: false mergedTo: Set(); 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Variable 1 at class MyClass class type parameter 0; tree T extends Object >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 10 at method MyClass#context():V local variable myc(0); tree String at position ((3,0)) within MyClass<String>) >; 
args: ( Variable 8 at method MyClass#context():V local variable s(0); tree String ); 
result: List(); 
)

