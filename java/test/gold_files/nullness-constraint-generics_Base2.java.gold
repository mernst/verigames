Constraints:
SubtypeConstraint( Variable 1 at class generics.Base class type parameter 0; tree X  <:  Variable 0 at class generics.Base class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within XAtm: @VarAnnot(0) Object )

SubtypeConstraint( Variable 3 at class generics.Base class type parameter 1; tree Y  <:  Variable 2 at class generics.Base class type parameter bound 1 & 0; tree <<missing tree>> at position ((3,1)) within YAtm: @VarAnnot(2) Object )

SubtypeConstraint( Variable 10 at class generics.Base field x; tree X  <:  Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Variable 11 at class generics.Base field y; tree Y  <:  Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 4 at class generics.Base extends type; tree <<missing tree>> within 
abstract class Base<X, Y> {
    protected X x;
    protected Y y;
    
    public Base(final X x, final Y y) {
        super();
        this.x = x;
        this.y = y;
    }
    
    public abstract void set(X x);
} )

SubtypeConstraint( Variable 5 at method generics.Base#<init>(Ljava/lang/Object;Ljava/lang/Object;):V return type; tree 
public <init>(final X x, final Y y) {
    super();
    this.x = x;
    this.y = y;
}  <:  Variable 4 at class generics.Base extends type; tree <<missing tree>> within 
abstract class Base<X, Y> {
    protected X x;
    protected Y y;
    
    public Base(final X x, final Y y) {
        super();
        this.x = x;
        this.y = y;
    }
    
    public abstract void set(X x);
} )

SubtypeConstraint( Variable 1 at class generics.Base class type parameter 0; tree X  <:  Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Variable 3 at class generics.Base class type parameter 1; tree Y  <:  Constant(@nninf.quals.Nullable) )

StubBoardUseConstraint(java.lang.Object,java.lang.Object#<init>():void,method generics.Base#<init>(Ljava/lang/Object;Ljava/lang/Object;):V constraint position,null,List(),List(),List(),List(),List(),List(Constant(@nninf.quals.Nullable)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: method generics.Base#<init>(Ljava/lang/Object;Ljava/lang/Object;):V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@nninf.quals.Nullable)); 
)

checkers.inference.FieldAccessConstraint(
contextVp: method generics.Base#<init>(Ljava/lang/Object;Ljava/lang/Object;):V constraint position; 
calledVp: Some(class generics.Base field x); 
receiver: Constant(@nninf.quals.Nullable); 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Variable 1 at class generics.Base class type parameter 0; tree X, Variable 3 at class generics.Base class type parameter 1; tree Y >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 0 at class generics.Base class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within XAtm: @VarAnnot(0) Object), List(Variable 2 at class generics.Base class type parameter bound 1 & 0; tree <<missing tree>> at position ((3,1)) within YAtm: @VarAnnot(2) Object) >; 
args: (  ); 
result: List(Variable 10 at class generics.Base field x; tree X); 
)

SubtypeConstraint( Variable 1 at class generics.Base class type parameter 0; tree X  <:  Variable 10 at class generics.Base field x; tree X )

checkers.inference.FieldAssignmentConstraint(
contextVp: method generics.Base#<init>(Ljava/lang/Object;Ljava/lang/Object;):V constraint position; 
calledVp: Some(class generics.Base field x); 
receiver: Constant(@nninf.quals.Nullable); 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Variable 1 at class generics.Base class type parameter 0; tree X, Variable 3 at class generics.Base class type parameter 1; tree Y >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 0 at class generics.Base class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within XAtm: @VarAnnot(0) Object), List(Variable 2 at class generics.Base class type parameter bound 1 & 0; tree <<missing tree>> at position ((3,1)) within YAtm: @VarAnnot(2) Object) >; 
args: ( Variable 1 at class generics.Base class type parameter 0; tree X ); 
result: List(); 
)

checkers.inference.FieldAccessConstraint(
contextVp: method generics.Base#<init>(Ljava/lang/Object;Ljava/lang/Object;):V constraint position; 
calledVp: Some(class generics.Base field y); 
receiver: Constant(@nninf.quals.Nullable); 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Variable 1 at class generics.Base class type parameter 0; tree X, Variable 3 at class generics.Base class type parameter 1; tree Y >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 0 at class generics.Base class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within XAtm: @VarAnnot(0) Object), List(Variable 2 at class generics.Base class type parameter bound 1 & 0; tree <<missing tree>> at position ((3,1)) within YAtm: @VarAnnot(2) Object) >; 
args: (  ); 
result: List(Variable 11 at class generics.Base field y; tree Y); 
)

SubtypeConstraint( Variable 3 at class generics.Base class type parameter 1; tree Y  <:  Variable 11 at class generics.Base field y; tree Y )

checkers.inference.FieldAssignmentConstraint(
contextVp: method generics.Base#<init>(Ljava/lang/Object;Ljava/lang/Object;):V constraint position; 
calledVp: Some(class generics.Base field y); 
receiver: Constant(@nninf.quals.Nullable); 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Variable 1 at class generics.Base class type parameter 0; tree X, Variable 3 at class generics.Base class type parameter 1; tree Y >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 0 at class generics.Base class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within XAtm: @VarAnnot(0) Object), List(Variable 2 at class generics.Base class type parameter bound 1 & 0; tree <<missing tree>> at position ((3,1)) within YAtm: @VarAnnot(2) Object) >; 
args: ( Variable 3 at class generics.Base class type parameter 1; tree Y ); 
result: List(); 
)

SubtypeConstraint( Variable 8 at method generics.Base#set(Ljava/lang/Object;):V receiver; tree <<missing tree>> within 
public abstract void set(X x);Atm: @VarAnnot(8) Base<X extends Object, Y extends Object>  <:  Variable 4 at class generics.Base extends type; tree <<missing tree>> within 
abstract class Base<X, Y> {
    protected X x;
    protected Y y;
    
    public Base(final X x, final Y y) {
        super();
        this.x = x;
        this.y = y;
    }
    
    public abstract void set(X x);
} )

SubtypeConstraint( Variable 13 at class generics.PrintBase class type parameter 0; tree X  <:  Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Variable 15 at class generics.PrintBase class type parameter 1; tree Y  <:  Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Variable 13 at class generics.PrintBase class type parameter 0; tree X  <:  Variable 12 at class generics.PrintBase class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within XAtm: @VarAnnot(12) Object )

SubtypeConstraint( Variable 15 at class generics.PrintBase class type parameter 1; tree Y  <:  Variable 14 at class generics.PrintBase class type parameter bound 1 & 0; tree <<missing tree>> at position ((3,1)) within YAtm: @VarAnnot(14) Object )

SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 16 at class generics.PrintBase extends type; tree Base within Base<X, Y> )

SubtypeConstraint( Variable 17 at method generics.PrintBase#<init>(Ljava/lang/Object;Ljava/lang/Object;):V return type; tree 
public <init>(final X x, final Y y) {
    super(x, y);
}  <:  Variable 16 at class generics.PrintBase extends type; tree Base within Base<X, Y> )

SubtypeConstraint( Variable 6 at method generics.Base#<init>(Ljava/lang/Object;Ljava/lang/Object;):V parameter 0; tree X  <:  Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Variable 7 at method generics.Base#<init>(Ljava/lang/Object;Ljava/lang/Object;):V parameter 1; tree Y  <:  Constant(@nninf.quals.Nullable) )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method generics.PrintBase#<init>(Ljava/lang/Object;Ljava/lang/Object;):V constraint position; 
calledVp: Some(method generics.Base#<init>(Ljava/lang/Object;Ljava/lang/Object;):V); 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Variable 1 at class generics.Base class type parameter 0; tree X, Variable 3 at class generics.Base class type parameter 1; tree Y >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 0 at class generics.Base class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within XAtm: @VarAnnot(0) Object), List(Variable 2 at class generics.Base class type parameter bound 1 & 0; tree <<missing tree>> at position ((3,1)) within YAtm: @VarAnnot(2) Object) >; 
args: ( Variable 13 at class generics.PrintBase class type parameter 0; tree X, Variable 15 at class generics.PrintBase class type parameter 1; tree Y ); 
result: List(Variable 5 at method generics.Base#<init>(Ljava/lang/Object;Ljava/lang/Object;):V return type; tree 
public <init>(final X x, final Y y) {
    super();
    this.x = x;
    this.y = y;
}); 
)

SubtypeConstraint( Variable 5 at method generics.Base#<init>(Ljava/lang/Object;Ljava/lang/Object;):V return type; tree 
public <init>(final X x, final Y y) {
    super();
    this.x = x;
    this.y = y;
}  <:  Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Variable 20 at method generics.PrintBase#set(Ljava/lang/Object;):V receiver; tree <<missing tree>> within 
public void set(X x) {
    this.x = x;
}Atm: @VarAnnot(20) PrintBase<X extends Object, Y extends Object>  <:  Variable 16 at class generics.PrintBase extends type; tree Base within Base<X, Y> )

SubtypeConstraint( Variable 9 at method generics.Base#set(Ljava/lang/Object;):V parameter 0; tree X  <:  Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Variable 9 at method generics.Base#set(Ljava/lang/Object;):V parameter 0; tree X  <:  Variable 21 at method generics.PrintBase#set(Ljava/lang/Object;):V parameter 0; tree X )

SubtypeConstraint( Variable 21 at method generics.PrintBase#set(Ljava/lang/Object;):V parameter 0; tree X  <:  Constant(@nninf.quals.Nullable) )

checkers.inference.FieldAccessConstraint(
contextVp: method generics.PrintBase#set(Ljava/lang/Object;):V constraint position; 
calledVp: Some(class generics.Base field x); 
receiver: Variable 20 at method generics.PrintBase#set(Ljava/lang/Object;):V receiver; tree <<missing tree>> within 
public void set(X x) {
    this.x = x;
}Atm: @VarAnnot(20) PrintBase<X extends Object, Y extends Object>; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Variable 1 at class generics.Base class type parameter 0; tree X, Variable 3 at class generics.Base class type parameter 1; tree Y >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 12 at class generics.PrintBase class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within XAtm: @VarAnnot(12) Object), List(Variable 14 at class generics.PrintBase class type parameter bound 1 & 0; tree <<missing tree>> at position ((3,1)) within YAtm: @VarAnnot(14) Object) >; 
args: (  ); 
result: List(Variable 10 at class generics.Base field x; tree X); 
)

SubtypeConstraint( Variable 13 at class generics.PrintBase class type parameter 0; tree X  <:  Variable 10 at class generics.Base field x; tree X )

checkers.inference.FieldAssignmentConstraint(
contextVp: method generics.PrintBase#set(Ljava/lang/Object;):V constraint position; 
calledVp: Some(class generics.Base field x); 
receiver: Variable 20 at method generics.PrintBase#set(Ljava/lang/Object;):V receiver; tree <<missing tree>> within 
public void set(X x) {
    this.x = x;
}Atm: @VarAnnot(20) PrintBase<X extends Object, Y extends Object>; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Variable 1 at class generics.Base class type parameter 0; tree X, Variable 3 at class generics.Base class type parameter 1; tree Y >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 12 at class generics.PrintBase class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within XAtm: @VarAnnot(12) Object), List(Variable 14 at class generics.PrintBase class type parameter bound 1 & 0; tree <<missing tree>> at position ((3,1)) within YAtm: @VarAnnot(14) Object) >; 
args: ( Variable 13 at class generics.PrintBase class type parameter 0; tree X ); 
result: List(); 
)

SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 22 at class generics.Instantiate extends type; tree <<missing tree>> within 
class Instantiate {
    
    Instantiate() {
        super();
    }
    
    public void create() {
        final Base<Integer, String> bis = new PrintBase<Integer, String>(new Integer(0), "Y");
        bis.set(new Integer(3));
    }
} )

SubtypeConstraint( Variable 23 at method generics.Instantiate#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 22 at class generics.Instantiate extends type; tree <<missing tree>> within 
class Instantiate {
    
    Instantiate() {
        super();
    }
    
    public void create() {
        final Base<Integer, String> bis = new PrintBase<Integer, String>(new Integer(0), "Y");
        bis.set(new Integer(3));
    }
} )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method generics.Instantiate#<init>():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@nninf.quals.Nullable)); 
)

SubtypeConstraint( Variable 24 at method generics.Instantiate#create():V receiver; tree <<missing tree>> within 
public void create() {
    final Base<Integer, String> bis = new PrintBase<Integer, String>(new Integer(0), "Y");
    bis.set(new Integer(3));
}Atm: @VarAnnot(24) Instantiate  <:  Variable 22 at class generics.Instantiate extends type; tree <<missing tree>> within 
class Instantiate {
    
    Instantiate() {
        super();
    }
    
    public void create() {
        final Base<Integer, String> bis = new PrintBase<Integer, String>(new Integer(0), "Y");
        bis.set(new Integer(3));
    }
} )

SubtypeConstraint( Variable 18 at method generics.PrintBase#<init>(Ljava/lang/Object;Ljava/lang/Object;):V parameter 0; tree X  <:  Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Variable 19 at method generics.PrintBase#<init>(Ljava/lang/Object;Ljava/lang/Object;):V parameter 1; tree Y  <:  Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Variable 25 at method generics.Instantiate#create():V creation 1; tree Integer  <:  Variable 18 at method generics.PrintBase#<init>(Ljava/lang/Object;Ljava/lang/Object;):V parameter 0; tree X )

SubtypeConstraint( Variable 25 at method generics.Instantiate#create():V creation 1; tree Integer  <:  Constant(@nninf.quals.Nullable) )

StubBoardUseConstraint(java.lang.Integer,java.lang.Integer#<init>(I):void,method generics.Instantiate#create():V constraint position,null,List(),List(),List(),List(),List(Constant(@nninf.quals.NonNull)),List(Constant(@nninf.quals.Nullable)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: method generics.Instantiate#create():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: ( Constant(@nninf.quals.NonNull) ); 
result: List(Constant(@nninf.quals.Nullable)); 
)

InequalityConstraint( context: method generics.Instantiate#create():V constraint position, Variable 25 at method generics.Instantiate#create():V creation 1; tree Integer != Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Literal(STRING_LITERAL, "Y")  <:  Variable 19 at method generics.PrintBase#<init>(Ljava/lang/Object;Ljava/lang/Object;):V parameter 1; tree Y )

SubtypeConstraint( Literal(STRING_LITERAL, "Y")  <:  Constant(@nninf.quals.Nullable) )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method generics.Instantiate#create():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: ( Constant(@nninf.quals.NonNull) ); 
result: List(Constant(@nninf.quals.Nullable)); 
)

checkers.inference.InstanceMethodCallConstraint(
contextVp: method generics.Instantiate#create():V constraint position; 
calledVp: Some(method generics.PrintBase#<init>(Ljava/lang/Object;Ljava/lang/Object;):V); 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Variable 13 at class generics.PrintBase class type parameter 0; tree X, Variable 15 at class generics.PrintBase class type parameter 1; tree Y >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 30 at method generics.Instantiate#create():V creation 0; tree Integer at position ((3,0)) within PrintBase<Integer, String>), List(Variable 31 at method generics.Instantiate#create():V creation 0; tree String at position ((3,1)) within PrintBase<Integer, String>) >; 
args: ( Variable 25 at method generics.Instantiate#create():V creation 1; tree Integer, Literal(STRING_LITERAL, "Y") ); 
result: List(Variable 17 at method generics.PrintBase#<init>(Ljava/lang/Object;Ljava/lang/Object;):V return type; tree 
public <init>(final X x, final Y y) {
    super(x, y);
}); 
)

InequalityConstraint( context: method generics.Instantiate#create():V constraint position, Variable 29 at method generics.Instantiate#create():V creation 0; tree PrintBase within PrintBase<Integer, String> != Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Variable 29 at method generics.Instantiate#create():V creation 0; tree PrintBase within PrintBase<Integer, String>  <:  Variable 26 at method generics.Instantiate#create():V local variable bis(0); tree Base within Base<Integer, String> )

EqualityConstraint( Variable 27 at method generics.Instantiate#create():V local variable bis(0); tree Integer at position ((3,0)) within Base<Integer, String> = Variable 30 at method generics.Instantiate#create():V creation 0; tree Integer at position ((3,0)) within PrintBase<Integer, String> )

EqualityConstraint( Variable 28 at method generics.Instantiate#create():V local variable bis(0); tree String at position ((3,1)) within Base<Integer, String> = Variable 31 at method generics.Instantiate#create():V creation 0; tree String at position ((3,1)) within PrintBase<Integer, String> )

InequalityConstraint( context: method generics.Instantiate#create():V constraint position, Variable 26 at method generics.Instantiate#create():V local variable bis(0); tree Base within Base<Integer, String> != Constant(@nninf.quals.Nullable) )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method generics.Instantiate#create():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: ( Constant(@nninf.quals.NonNull) ); 
result: List(Constant(@nninf.quals.Nullable)); 
)

InequalityConstraint( context: method generics.Instantiate#create():V constraint position, Variable 32 at method generics.Instantiate#create():V creation 2; tree Integer != Constant(@nninf.quals.Nullable) )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method generics.Instantiate#create():V constraint position; 
calledVp: Some(method generics.Base#set(Ljava/lang/Object;):V); 
receiver: Variable 26 at method generics.Instantiate#create():V local variable bis(0); tree Base within Base<Integer, String>; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Variable 1 at class generics.Base class type parameter 0; tree X, Variable 3 at class generics.Base class type parameter 1; tree Y >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 27 at method generics.Instantiate#create():V local variable bis(0); tree Integer at position ((3,0)) within Base<Integer, String>), List(Variable 28 at method generics.Instantiate#create():V local variable bis(0); tree String at position ((3,1)) within Base<Integer, String>) >; 
args: ( Variable 32 at method generics.Instantiate#create():V creation 2; tree Integer ); 
result: List(); 
)

