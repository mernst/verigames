Constraints:
subtype constraint: Constant(@nninf.quals.Nullable)  <:  Variable 0 at class Dereference extends type; tree <<missing tree>> within 
class Dereference {
    
    Dereference() {
        super();
    }
    Dereference d;
    
    void foo() {
        Dereference d2 = d.d;
    }
}

subtype constraint: Variable 1 at method Dereference#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 0 at class Dereference extends type; tree <<missing tree>> within 
class Dereference {
    
    Dereference() {
        super();
    }
    Dereference d;
    
    void foo() {
        Dereference d2 = d.d;
    }
}

subtype constraint: Variable 2 at method Dereference#foo():V receiver; tree <<missing tree>> within 
void foo() {
    Dereference d2 = d.d;
}Atm: @VarAnnot(2) Dereference  <:  Variable 0 at class Dereference extends type; tree <<missing tree>> within 
class Dereference {
    
    Dereference() {
        super();
    }
    Dereference d;
    
    void foo() {
        Dereference d2 = d.d;
    }
}

checkers.inference.FieldAccessConstraint(
contextVp: method Dereference#foo():V constraint position; 
calledVp: class Dereference field d; 
receiver: Variable 2 at method Dereference#foo():V receiver; tree <<missing tree>> within 
void foo() {
    Dereference d2 = d.d;
}Atm: @VarAnnot(2) Dereference; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 3 at class Dereference field d; tree Dereference); 
)

inequality constraint at method Dereference#foo():V constraint position: Variable 3 at class Dereference field d; tree Dereference != Constant(@nninf.quals.Nullable)

checkers.inference.FieldAccessConstraint(
contextVp: method Dereference#foo():V constraint position; 
calledVp: class Dereference field d; 
receiver: Variable 3 at class Dereference field d; tree Dereference; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 3 at class Dereference field d; tree Dereference); 
)

subtype constraint: Variable 3 at class Dereference field d; tree Dereference  <:  Variable 4 at method Dereference#foo():V local variable d2(0); tree Dereference

