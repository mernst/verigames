Constraints:
EqualityConstraint( Variable 2 at method CompoundAssignmentTest#method():I return type; tree int = Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Constant(@trusted.quals.Untrusted)  <:  Variable 0 at class CompoundAssignmentTest extends type; tree <<missing tree>> within 
class CompoundAssignmentTest {
    
    CompoundAssignmentTest() {
        super();
    }
    
    public static void main() {
        Integer i = 2;
        i += method();
    }
    
    public static int method() {
        return 1;
    }
} )

SubtypeConstraint( Variable 1 at method CompoundAssignmentTest#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 0 at class CompoundAssignmentTest extends type; tree <<missing tree>> within 
class CompoundAssignmentTest {
    
    CompoundAssignmentTest() {
        super();
    }
    
    public static void main() {
        Integer i = 2;
        i += method();
    }
    
    public static int method() {
        return 1;
    }
} )

SubtypeConstraint( Variable 2 at method CompoundAssignmentTest#method():I return type; tree int  <:  Variable 3 at method CompoundAssignmentTest#main():V local variable i(0); tree Integer )

checkers.inference.StaticMethodCallConstraint(
contextVp: method CompoundAssignmentTest#main():V constraint position; 
calledVp: method CompoundAssignmentTest#method():I; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 2 at method CompoundAssignmentTest#method():I return type; tree int); 
)

