Constraints:
SubtypeConstraint( Constant(@trusted.quals.Untrusted)  <:  Variable 0 at class NestedTypeArguments extends type; tree <<missing tree>> within 
class NestedTypeArguments {
    
    NestedTypeArguments() {
        super();
    }
    Generic<? extends String, List<Object>> g;
} )

SubtypeConstraint( Variable 1 at method NestedTypeArguments#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 0 at class NestedTypeArguments extends type; tree <<missing tree>> within 
class NestedTypeArguments {
    
    NestedTypeArguments() {
        super();
    }
    Generic<? extends String, List<Object>> g;
} )

StubBoardUseConstraint(java.lang.Object,java.lang.Object#<init>():void,method NestedTypeArguments#<init>():V constraint position,null,List(),List(),List(),List(),List(),List(Constant(@trusted.quals.Untrusted)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: method NestedTypeArguments#<init>():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@trusted.quals.Untrusted)); 
)

SubtypeConstraint( Variable 7 at class Generic class type parameter 0; tree T  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 7 at class Generic class type parameter 0; tree T  <:  Variable 6 at class Generic class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within TAtm: @VarAnnot(6) Object )

SubtypeConstraint( Variable 9 at class Generic class type parameter 1; tree S  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 9 at class Generic class type parameter 1; tree S  <:  Variable 8 at class Generic class type parameter bound 1 & 0; tree <<missing tree>> at position ((3,1)) within SAtm: @VarAnnot(8) Object )

SubtypeConstraint( Constant(@trusted.quals.Untrusted)  <:  Variable 10 at class Generic extends type; tree <<missing tree>> within 
class Generic<T, S> {
    
    Generic() {
        super();
    }
} )

SubtypeConstraint( Variable 11 at method Generic#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 10 at class Generic extends type; tree <<missing tree>> within 
class Generic<T, S> {
    
    Generic() {
        super();
    }
} )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method Generic#<init>():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@trusted.quals.Untrusted)); 
)

