Constraints:
SubtypeConstraint( Variable 1 at class GenericFieldAccess class type parameter 0; tree A  <:  Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Variable 1 at class GenericFieldAccess class type parameter 0; tree A  <:  Variable 0 at class GenericFieldAccess class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within AAtm: @VarAnnot(0) Object )

SubtypeConstraint( Variable 3 at class GenericFieldAccess class type parameter 1; tree B  <:  Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Variable 3 at class GenericFieldAccess class type parameter 1; tree B  <:  Variable 2 at class GenericFieldAccess class type parameter bound 1 & 0; tree <<missing tree>> at position ((3,1)) within BAtm: @VarAnnot(2) Object )

SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 4 at class GenericFieldAccess extends type; tree <<missing tree>> within 
public class GenericFieldAccess<A, B> {
    
    public GenericFieldAccess() {
        super();
    }
    
    public void access() {
    }
} )

SubtypeConstraint( Variable 5 at method GenericFieldAccess#<init>():V return type; tree 
public <init>() {
    super();
}  <:  Variable 4 at class GenericFieldAccess extends type; tree <<missing tree>> within 
public class GenericFieldAccess<A, B> {
    
    public GenericFieldAccess() {
        super();
    }
    
    public void access() {
    }
} )

StubBoardUseConstraint(java.lang.Object,java.lang.Object#<init>():void,method GenericFieldAccess#<init>():V constraint position,null,List(),List(),List(),List(),List(),List(Constant(@nninf.quals.Nullable)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: method GenericFieldAccess#<init>():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@nninf.quals.Nullable)); 
)

SubtypeConstraint( Variable 6 at method GenericFieldAccess#access():V receiver; tree <<missing tree>> within 
public void access() {
}Atm: @VarAnnot(6) GenericFieldAccess<A extends Object, B extends Object>  <:  Variable 4 at class GenericFieldAccess extends type; tree <<missing tree>> within 
public class GenericFieldAccess<A, B> {
    
    public GenericFieldAccess() {
        super();
    }
    
    public void access() {
    }
} )

SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 7 at class OtherAccess extends type; tree <<missing tree>> within 
class OtherAccess {
    private GenericFieldAccess<String, Integer> gfAccess;
    
    public OtherAccess() {
        super();
        gfAccess = new GenericFieldAccess<String, Integer>();
    }
    
    public void localAccess() {
        gfAccess.access();
    }
} )

SubtypeConstraint( Variable 8 at method OtherAccess#<init>():V return type; tree 
public <init>() {
    super();
    gfAccess = new GenericFieldAccess<String, Integer>();
}  <:  Variable 7 at class OtherAccess extends type; tree <<missing tree>> within 
class OtherAccess {
    private GenericFieldAccess<String, Integer> gfAccess;
    
    public OtherAccess() {
        super();
        gfAccess = new GenericFieldAccess<String, Integer>();
    }
    
    public void localAccess() {
        gfAccess.access();
    }
} )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method OtherAccess#<init>():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@nninf.quals.Nullable)); 
)

checkers.inference.InstanceMethodCallConstraint(
contextVp: method OtherAccess#<init>():V constraint position; 
calledVp: Some(method GenericFieldAccess#<init>():V); 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Variable 1 at class GenericFieldAccess class type parameter 0; tree A, Variable 3 at class GenericFieldAccess class type parameter 1; tree B >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 14 at method OtherAccess#<init>():V creation 0; tree String at position ((3,0)) within GenericFieldAccess<String, Integer>), List(Variable 15 at method OtherAccess#<init>():V creation 0; tree Integer at position ((3,1)) within GenericFieldAccess<String, Integer>) >; 
args: (  ); 
result: List(Variable 5 at method GenericFieldAccess#<init>():V return type; tree 
public <init>() {
    super();
}); 
)

InequalityConstraint( context: method OtherAccess#<init>():V constraint position, Variable 13 at method OtherAccess#<init>():V creation 0; tree GenericFieldAccess within GenericFieldAccess<String, Integer> != Constant(@nninf.quals.Nullable) )

SubtypeConstraint( RefinementVariable #16 Declared Variable: Variable 10 at class OtherAccess field gfAccess; tree GenericFieldAccess within GenericFieldAccess<String, Integer> IfTest: false mergedTo: (Set())  <:  Variable 10 at class OtherAccess field gfAccess; tree GenericFieldAccess within GenericFieldAccess<String, Integer> )

checkers.inference.FieldAssignmentConstraint(
contextVp: method OtherAccess#<init>():V constraint position; 
calledVp: Some(class OtherAccess field gfAccess); 
receiver: Constant(@nninf.quals.Nullable); 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: ( Variable 13 at method OtherAccess#<init>():V creation 0; tree GenericFieldAccess within GenericFieldAccess<String, Integer>, Variable 14 at method OtherAccess#<init>():V creation 0; tree String at position ((3,0)) within GenericFieldAccess<String, Integer>, Variable 15 at method OtherAccess#<init>():V creation 0; tree Integer at position ((3,1)) within GenericFieldAccess<String, Integer> ); 
result: List(); 
)

EqualityConstraint( RefinementVariable #16 Declared Variable: Variable 10 at class OtherAccess field gfAccess; tree GenericFieldAccess within GenericFieldAccess<String, Integer> IfTest: false mergedTo: (Set()) = Variable 13 at method OtherAccess#<init>():V creation 0; tree GenericFieldAccess within GenericFieldAccess<String, Integer> )

SubtypeConstraint( Variable 13 at method OtherAccess#<init>():V creation 0; tree GenericFieldAccess within GenericFieldAccess<String, Integer>  <:  Variable 10 at class OtherAccess field gfAccess; tree GenericFieldAccess within GenericFieldAccess<String, Integer> )

SubtypeConstraint( Variable 9 at method OtherAccess#localAccess():V receiver; tree <<missing tree>> within 
public void localAccess() {
    gfAccess.access();
}Atm: @VarAnnot(9) OtherAccess  <:  Variable 7 at class OtherAccess extends type; tree <<missing tree>> within 
class OtherAccess {
    private GenericFieldAccess<String, Integer> gfAccess;
    
    public OtherAccess() {
        super();
        gfAccess = new GenericFieldAccess<String, Integer>();
    }
    
    public void localAccess() {
        gfAccess.access();
    }
} )

checkers.inference.FieldAccessConstraint(
contextVp: method OtherAccess#localAccess():V constraint position; 
calledVp: Some(class OtherAccess field gfAccess); 
receiver: Variable 9 at method OtherAccess#localAccess():V receiver; tree <<missing tree>> within 
public void localAccess() {
    gfAccess.access();
}Atm: @VarAnnot(9) OtherAccess; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 10 at class OtherAccess field gfAccess; tree GenericFieldAccess within GenericFieldAccess<String, Integer>, Variable 11 at class OtherAccess field gfAccess; tree String at position ((3,0)) within GenericFieldAccess<String, Integer>, Variable 12 at class OtherAccess field gfAccess; tree Integer at position ((3,1)) within GenericFieldAccess<String, Integer>); 
)

InequalityConstraint( context: method OtherAccess#localAccess():V constraint position, Variable 10 at class OtherAccess field gfAccess; tree GenericFieldAccess within GenericFieldAccess<String, Integer> != Constant(@nninf.quals.Nullable) )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method OtherAccess#localAccess():V constraint position; 
calledVp: Some(method GenericFieldAccess#access():V); 
receiver: Variable 10 at class OtherAccess field gfAccess; tree GenericFieldAccess within GenericFieldAccess<String, Integer>; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Variable 1 at class GenericFieldAccess class type parameter 0; tree A, Variable 3 at class GenericFieldAccess class type parameter 1; tree B >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 11 at class OtherAccess field gfAccess; tree String at position ((3,0)) within GenericFieldAccess<String, Integer>), List(Variable 12 at class OtherAccess field gfAccess; tree Integer at position ((3,1)) within GenericFieldAccess<String, Integer>) >; 
args: (  ); 
result: List(); 
)

