Constraints:
SubtypeConstraint( Constant(@trusted.quals.Untrusted)  <:  Variable 0 at class MyObj extends type; tree <<missing tree>> within 
class MyObj {
    
    MyObj() {
        super();
    }
} )

SubtypeConstraint( Variable 1 at method MyObj#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 0 at class MyObj extends type; tree <<missing tree>> within 
class MyObj {
    
    MyObj() {
        super();
    }
} )

StubBoardUseConstraint(java.lang.Object,java.lang.Object#<init>():void,method MyObj#<init>():V constraint position,null,List(),List(),List(),List(),List(),List(Constant(@trusted.quals.Untrusted)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: method MyObj#<init>():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@trusted.quals.Untrusted)); 
)

SubtypeConstraint( Constant(@trusted.quals.Untrusted)  <:  Variable 2 at class ArrayFieldAccess extends type; tree <<missing tree>> within 
class ArrayFieldAccess {
    
    ArrayFieldAccess() {
        super();
    }
    private MyObj[] array;
    
    public void context() {
        int i = array.length;
        array[i] = new MyObj();
    }
} )

SubtypeConstraint( Variable 3 at method ArrayFieldAccess#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 2 at class ArrayFieldAccess extends type; tree <<missing tree>> within 
class ArrayFieldAccess {
    
    ArrayFieldAccess() {
        super();
    }
    private MyObj[] array;
    
    public void context() {
        int i = array.length;
        array[i] = new MyObj();
    }
} )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method ArrayFieldAccess#<init>():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@trusted.quals.Untrusted)); 
)

SubtypeConstraint( Variable 4 at method ArrayFieldAccess#context():V receiver; tree <<missing tree>> within 
public void context() {
    int i = array.length;
    array[i] = new MyObj();
}Atm: @VarAnnot(4) ArrayFieldAccess  <:  Variable 2 at class ArrayFieldAccess extends type; tree <<missing tree>> within 
class ArrayFieldAccess {
    
    ArrayFieldAccess() {
        super();
    }
    private MyObj[] array;
    
    public void context() {
        int i = array.length;
        array[i] = new MyObj();
    }
} )

checkers.inference.FieldAccessConstraint(
contextVp: method ArrayFieldAccess#context():V constraint position; 
calledVp: Some(class ArrayFieldAccess field array); 
receiver: Variable 4 at method ArrayFieldAccess#context():V receiver; tree <<missing tree>> within 
public void context() {
    int i = array.length;
    array[i] = new MyObj();
}Atm: @VarAnnot(4) ArrayFieldAccess; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 5 at class ArrayFieldAccess field array; tree MyObj[], Variable 6 at class ArrayFieldAccess field array; tree MyObj at position ((0,0)) within MyObj[]); 
)

checkers.inference.FieldAccessConstraint(
contextVp: method ArrayFieldAccess#context():V constraint position; 
calledVp: Some(class ArrayFieldAccess field array); 
receiver: Variable 4 at method ArrayFieldAccess#context():V receiver; tree <<missing tree>> within 
public void context() {
    int i = array.length;
    array[i] = new MyObj();
}Atm: @VarAnnot(4) ArrayFieldAccess; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 5 at class ArrayFieldAccess field array; tree MyObj[], Variable 6 at class ArrayFieldAccess field array; tree MyObj at position ((0,0)) within MyObj[]); 
)

checkers.inference.InstanceMethodCallConstraint(
contextVp: method ArrayFieldAccess#context():V constraint position; 
calledVp: Some(method MyObj#<init>():V); 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 1 at method MyObj#<init>():V return type; tree 
<init>() {
    super();
}); 
)

SubtypeConstraint( Variable 8 at method ArrayFieldAccess#context():V creation 0; tree MyObj  <:  Variable 6 at class ArrayFieldAccess field array; tree MyObj at position ((0,0)) within MyObj[] )

