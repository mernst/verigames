Constraints:
SubtypeConstraint( Variable 1 at class List class type parameter 0; tree T extends Object  <:  Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Variable 1 at class List class type parameter 0; tree T extends Object  <:  Variable 0 at class List class type parameter bound 0 & 0; tree Object at position ((3,0)) within T extends Object )

SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 2 at class ListImp extends type; tree <<missing tree>> within 
class ListImp implements List<String> {
    
    ListImp() {
        super();
    }
} )

SubtypeConstraint( Variable 5 at method ListImp#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 2 at class ListImp extends type; tree <<missing tree>> within 
class ListImp implements List<String> {
    
    ListImp() {
        super();
    }
} )

StubBoardUseConstraint(java.lang.Object,java.lang.Object#<init>():void,method ListImp#<init>():V constraint position,null,List(),List(),List(),List(),List(),List(Constant(@nninf.quals.Nullable)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: method ListImp#<init>():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@nninf.quals.Nullable)); 
)

SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 6 at class CallMethod extends type; tree <<missing tree>> within 
class CallMethod {
    
    CallMethod() {
        super();
    }
    
    public <T extends List<String>>String call(T t) {
        return "any";
    }
    
    public static void main() {
        List<String> s = null;
        CallMethod cm = new CallMethod();
        cm.call(new ListImp());
        String retStore = cm.call(null);
        cm.<ListImp>call(null);
        cm.<List<String>>call(null);
    }
} )

SubtypeConstraint( Variable 7 at method CallMethod#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 6 at class CallMethod extends type; tree <<missing tree>> within 
class CallMethod {
    
    CallMethod() {
        super();
    }
    
    public <T extends List<String>>String call(T t) {
        return "any";
    }
    
    public static void main() {
        List<String> s = null;
        CallMethod cm = new CallMethod();
        cm.call(new ListImp());
        String retStore = cm.call(null);
        cm.<ListImp>call(null);
        cm.<List<String>>call(null);
    }
} )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method CallMethod#<init>():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@nninf.quals.Nullable)); 
)

SubtypeConstraint( Variable 12 at method CallMethod#call(LList;):Ljava/lang/String; receiver; tree <<missing tree>> within 
public <T extends List<String>>String call(T t) {
    return "any";
}Atm: @VarAnnot(12) CallMethod  <:  Variable 6 at class CallMethod extends type; tree <<missing tree>> within 
class CallMethod {
    
    CallMethod() {
        super();
    }
    
    public <T extends List<String>>String call(T t) {
        return "any";
    }
    
    public static void main() {
        List<String> s = null;
        CallMethod cm = new CallMethod();
        cm.call(new ListImp());
        String retStore = cm.call(null);
        cm.<ListImp>call(null);
        cm.<List<String>>call(null);
    }
} )

SubtypeConstraint( Variable 10 at method CallMethod#call(LList;):Ljava/lang/String; method type parameter 0; tree T extends List<String>  <:  Variable 8 at method CallMethod#call(LList;):Ljava/lang/String; method type parameter bound 0 & 0; tree List at position ((3,0)) within T extends List<String> )

SubtypeConstraint( Variable 10 at method CallMethod#call(LList;):Ljava/lang/String; method type parameter 0; tree T extends List<String>  <:  Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Variable 13 at method CallMethod#call(LList;):Ljava/lang/String; parameter 0; tree T  <:  Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Literal(STRING_LITERAL, "any")  <:  Variable 11 at method CallMethod#call(LList;):Ljava/lang/String; return type; tree String )

SubtypeConstraint( Literal(NULL_LITERAL, "null")  <:  Variable 14 at method CallMethod#main():V local variable s(0); tree List within List<String> )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method CallMethod#main():V constraint position; 
calledVp: Some(method CallMethod#<init>():V); 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 7 at method CallMethod#<init>():V return type; tree 
<init>() {
    super();
}); 
)

InequalityConstraint( context: method CallMethod#main():V constraint position, Variable 17 at method CallMethod#main():V creation 0; tree CallMethod != Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Variable 17 at method CallMethod#main():V creation 0; tree CallMethod  <:  Variable 16 at method CallMethod#main():V local variable cm(0); tree CallMethod )

InequalityConstraint( context: method CallMethod#main():V constraint position, Variable 16 at method CallMethod#main():V local variable cm(0); tree CallMethod != Constant(@nninf.quals.Nullable) )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method CallMethod#main():V constraint position; 
calledVp: Some(method ListImp#<init>():V); 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 5 at method ListImp#<init>():V return type; tree 
<init>() {
    super();
}); 
)

InequalityConstraint( context: method CallMethod#main():V constraint position, Variable 18 at method CallMethod#main():V creation 1; tree ListImp != Constant(@nninf.quals.Nullable) )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method CallMethod#main():V constraint position; 
calledVp: Some(method CallMethod#call(LList;):Ljava/lang/String;); 
receiver: Variable 16 at method CallMethod#main():V local variable cm(0); tree CallMethod; 
methodTypeParamLBs: < Variable 10 at method CallMethod#call(LList;):Ljava/lang/String; method type parameter 0; tree T extends List<String> >; 
classTypeParamLBs: <  >; 
methodTypeArgs: < List(Variable 19 at MethodTypeArgumentInMethodVP in method CallMethod#main():V; tree <<missing tree>> at position ((3,0)) within cm.call(new ListImp())Atm: @VarAnnot(19) List<String>, Variable 20 at MethodTypeArgumentInMethodVP in method CallMethod#main():V; tree <<missing tree>> at position ((3,0), (3,0)) within cm.call(new ListImp())Atm: @VarAnnot(20) String) >; 
classTypeArgs: <  >; 
args: ( Variable 18 at method CallMethod#main():V creation 1; tree ListImp ); 
result: List(Variable 11 at method CallMethod#call(LList;):Ljava/lang/String; return type; tree String); 
)

checkers.inference.InstanceMethodCallConstraint(
contextVp: method CallMethod#main():V constraint position; 
calledVp: Some(method CallMethod#call(LList;):Ljava/lang/String;); 
receiver: Variable 16 at method CallMethod#main():V local variable cm(0); tree CallMethod; 
methodTypeParamLBs: < Variable 10 at method CallMethod#call(LList;):Ljava/lang/String; method type parameter 0; tree T extends List<String> >; 
classTypeParamLBs: <  >; 
methodTypeArgs: < List(Variable 22 at MethodTypeArgumentInMethodVP in method CallMethod#main():V; tree <<missing tree>> at position ((3,0)) within cm.call(null)Atm: @VarAnnot(22) List<String>, Variable 23 at MethodTypeArgumentInMethodVP in method CallMethod#main():V; tree <<missing tree>> at position ((3,0), (3,0)) within cm.call(null)Atm: @VarAnnot(23) String) >; 
classTypeArgs: <  >; 
args: ( Literal(NULL_LITERAL, "null") ); 
result: List(Variable 11 at method CallMethod#call(LList;):Ljava/lang/String; return type; tree String); 
)

SubtypeConstraint( Variable 11 at method CallMethod#call(LList;):Ljava/lang/String; return type; tree String  <:  Variable 21 at method CallMethod#main():V local variable retStore(0); tree String )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method CallMethod#main():V constraint position; 
calledVp: Some(method CallMethod#call(LList;):Ljava/lang/String;); 
receiver: Variable 16 at method CallMethod#main():V local variable cm(0); tree CallMethod; 
methodTypeParamLBs: < Variable 10 at method CallMethod#call(LList;):Ljava/lang/String; method type parameter 0; tree T extends List<String> >; 
classTypeParamLBs: <  >; 
methodTypeArgs: < List(Variable 24 at MethodTypeArgumentInMethodVP in method CallMethod#main():V; tree ListImp at position ((3,0)) within cm.<ListImp>call(null), Variable 4 at class ListImp implements type 0; tree String at position ((3,0)) within List<String>) >; 
classTypeArgs: <  >; 
args: ( Literal(NULL_LITERAL, "null") ); 
result: List(Variable 11 at method CallMethod#call(LList;):Ljava/lang/String; return type; tree String); 
)

checkers.inference.InstanceMethodCallConstraint(
contextVp: method CallMethod#main():V constraint position; 
calledVp: Some(method CallMethod#call(LList;):Ljava/lang/String;); 
receiver: Variable 16 at method CallMethod#main():V local variable cm(0); tree CallMethod; 
methodTypeParamLBs: < Variable 10 at method CallMethod#call(LList;):Ljava/lang/String; method type parameter 0; tree T extends List<String> >; 
classTypeParamLBs: <  >; 
methodTypeArgs: < List(Variable 25 at MethodTypeArgumentInMethodVP in method CallMethod#main():V; tree List at position ((3,0)) within cm.<List<String>>call(null), Variable 26 at MethodTypeArgumentInMethodVP in method CallMethod#main():V; tree String at position ((3,0), (3,0)) within cm.<List<String>>call(null)) >; 
classTypeArgs: <  >; 
args: ( Literal(NULL_LITERAL, "null") ); 
result: List(Variable 11 at method CallMethod#call(LList;):Ljava/lang/String; return type; tree String); 
)

