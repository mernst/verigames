Constraints:
subtype constraint: Constant(@nninf.quals.Nullable)  <:  Variable 0 at class NestedTypeArguments extends type; tree <<missing tree>> within 
class NestedTypeArguments {
    
    NestedTypeArguments() {
        super();
    }
    Generic<? extends String, List<Object>> g;
}

subtype constraint: Variable 1 at method NestedTypeArguments#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 0 at class NestedTypeArguments extends type; tree <<missing tree>> within 
class NestedTypeArguments {
    
    NestedTypeArguments() {
        super();
    }
    Generic<? extends String, List<Object>> g;
}

subtype constraint: Constant(@nninf.quals.Nullable)  <:  Variable 6 at class Generic class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within TAtm: @VarAnnot(6) Object

subtype constraint: Constant(@nninf.quals.Nullable)  <:  Variable 8 at class Generic class type parameter bound 1 & 0; tree <<missing tree>> at position ((3,1)) within SAtm: @VarAnnot(8) Object

subtype constraint: Constant(@nninf.quals.Nullable)  <:  Variable 10 at class Generic extends type; tree <<missing tree>> within 
class Generic<T, S> {
    
    Generic() {
        super();
    }
}

subtype constraint: Variable 11 at method Generic#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 10 at class Generic extends type; tree <<missing tree>> within 
class Generic<T, S> {
    
    Generic() {
        super();
    }
}

