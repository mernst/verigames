Constraints:
SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 0 at class ReadField extends type; tree <<missing tree>> within 
class ReadField {
    
    ReadField() {
        super();
    }
    String f1 = null;
    
    void test(String b) {
        if (true) {
            f1 = "";
        }
        f1.toString();
    }
} )

SubtypeConstraint( Variable 2 at method ReadField#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 0 at class ReadField extends type; tree <<missing tree>> within 
class ReadField {
    
    ReadField() {
        super();
    }
    String f1 = null;
    
    void test(String b) {
        if (true) {
            f1 = "";
        }
        f1.toString();
    }
} )

SubtypeConstraint( Literal(NULL_LITERAL, "null")  <:  Variable 1 at class ReadField field f1; tree String )

SubtypeConstraint( Variable 3 at method ReadField#test(Ljava/lang/String;):V receiver; tree <<missing tree>> within 
void test(String b) {
    if (true) {
        f1 = "";
    }
    f1.toString();
}Atm: @VarAnnot(3) ReadField  <:  Variable 0 at class ReadField extends type; tree <<missing tree>> within 
class ReadField {
    
    ReadField() {
        super();
    }
    String f1 = null;
    
    void test(String b) {
        if (true) {
            f1 = "";
        }
        f1.toString();
    }
} )

SubtypeConstraint( RefinementVariable #5 Declared Variable: Variable 1 at class ReadField field f1; tree String IfTest: false mergedTo: Set(RefinementVariable #6 Declared Variable: Variable 1 at class ReadField field f1; tree String IfTest: false mergedTo: Set())  <:  Variable 1 at class ReadField field f1; tree String )

checkers.inference.FieldAssignmentConstraint(
contextVp: method ReadField#test(Ljava/lang/String;):V constraint position; 
calledVp: class ReadField field f1; 
receiver: Variable 3 at method ReadField#test(Ljava/lang/String;):V receiver; tree <<missing tree>> within 
void test(String b) {
    if (true) {
        f1 = "";
    }
    f1.toString();
}Atm: @VarAnnot(3) ReadField; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: ( Literal(STRING_LITERAL, "") ); 
result: List(); 
)

EqualityConstraint( RefinementVariable #5 Declared Variable: Variable 1 at class ReadField field f1; tree String IfTest: false mergedTo: Set(RefinementVariable #6 Declared Variable: Variable 1 at class ReadField field f1; tree String IfTest: false mergedTo: Set()) = Literal(STRING_LITERAL, "") )

SubtypeConstraint( Literal(STRING_LITERAL, "")  <:  Variable 1 at class ReadField field f1; tree String )

SubtypeConstraint( Variable 1 at class ReadField field f1; tree String  <:  RefinementVariable #6 Declared Variable: Variable 1 at class ReadField field f1; tree String IfTest: false mergedTo: Set() )

SubtypeConstraint( RefinementVariable #5 Declared Variable: Variable 1 at class ReadField field f1; tree String IfTest: false mergedTo: Set(RefinementVariable #6 Declared Variable: Variable 1 at class ReadField field f1; tree String IfTest: false mergedTo: Set())  <:  RefinementVariable #6 Declared Variable: Variable 1 at class ReadField field f1; tree String IfTest: false mergedTo: Set() )

SubtypeConstraint( RefinementVariable #6 Declared Variable: Variable 1 at class ReadField field f1; tree String IfTest: false mergedTo: Set()  <:  Variable 1 at class ReadField field f1; tree String )

InequalityConstraint( context: method ReadField#test(Ljava/lang/String;):V constraint position, RefinementVariable #6 Declared Variable: Variable 1 at class ReadField field f1; tree String IfTest: false mergedTo: Set() != Constant(@nninf.quals.Nullable) )

