Constraints:
SubtypeConstraint( Constant(@trusted.quals.Untrusted)  <:  Variable 0 at class First extends type; tree <<missing tree>> within 
public class First {
    
    public First() {
        super();
    }
    
    void m() {
        Object o = new Object();
        o = null;
    }
} )

SubtypeConstraint( Variable 1 at method First#<init>():V return type; tree 
public <init>() {
    super();
}  <:  Variable 0 at class First extends type; tree <<missing tree>> within 
public class First {
    
    public First() {
        super();
    }
    
    void m() {
        Object o = new Object();
        o = null;
    }
} )

SubtypeConstraint( Variable 2 at method First#m():V receiver; tree <<missing tree>> within 
void m() {
    Object o = new Object();
    o = null;
}Atm: @VarAnnot(2) First  <:  Variable 0 at class First extends type; tree <<missing tree>> within 
public class First {
    
    public First() {
        super();
    }
    
    void m() {
        Object o = new Object();
        o = null;
    }
} )

SubtypeConstraint( Variable 4 at method First#m():V creation 0; tree Object  <:  Variable 3 at method First#m():V local variable o(0); tree Object )

EqualityConstraint( RefinementVariable #5 Declared Variable: Variable 3 at method First#m():V local variable o(0); tree Object IfTest: false mergedTo: Set() = Literal(NULL_LITERAL, "null") )

SubtypeConstraint( Literal(NULL_LITERAL, "null")  <:  Variable 3 at method First#m():V local variable o(0); tree Object )

