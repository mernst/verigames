Constraints:
SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 0 at class FieldInit extends type; tree <<missing tree>> within 
class FieldInit {
    
    FieldInit() {
        super();
    }
    Object f1 = null;
    Object f2 = new Object();
} )

SubtypeConstraint( Variable 4 at method FieldInit#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 0 at class FieldInit extends type; tree <<missing tree>> within 
class FieldInit {
    
    FieldInit() {
        super();
    }
    Object f1 = null;
    Object f2 = new Object();
} )

SubtypeConstraint( Literal(NULL_LITERAL, "null")  <:  Variable 1 at class FieldInit field f1; tree Object )

InequalityConstraint( context: class FieldInit field f2 constraint position, Variable 2 at class FieldInit field f2 creation 0; tree Object != Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Variable 2 at class FieldInit field f2 creation 0; tree Object  <:  Variable 3 at class FieldInit field f2; tree Object )

SubtypeConstraint( Variable 3 at class FieldInit field f2; tree Object  <:  RefinementVariable #5 Declared Variable: Variable 2 at class FieldInit field f2 creation 0; tree Object IfTest: false mergedTo: Set() )

SubtypeConstraint( Variable 2 at class FieldInit field f2 creation 0; tree Object  <:  RefinementVariable #5 Declared Variable: Variable 2 at class FieldInit field f2 creation 0; tree Object IfTest: false mergedTo: Set() )

