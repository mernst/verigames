Constraints:
subtype constraint: Constant(@nninf.quals.Nullable)  <:  Variable 0 at class Field extends type; tree <<missing tree>> within 
class Field {
    
    Field() {
        super();
    }
    static String f1 = "";
    static String f2 = f1;
    
    void test() {
        String two = f1;
    }
}

subtype constraint: Variable 3 at method Field#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 0 at class Field extends type; tree <<missing tree>> within 
class Field {
    
    Field() {
        super();
    }
    static String f1 = "";
    static String f2 = f1;
    
    void test() {
        String two = f1;
    }
}

subtype constraint: Literal(STRING_LITERAL, "")  <:  Variable 1 at class Field static field f1; tree String

checkers.inference.FieldAccessConstraint(
contextVp: class Field static field f2 constraint position; 
calledVp: class Field static field f1; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 1 at class Field static field f1; tree String); 
)

subtype constraint: Variable 1 at class Field static field f1; tree String  <:  Variable 2 at class Field static field f2; tree String

subtype constraint: Variable 4 at method Field#test():V receiver; tree <<missing tree>> within 
void test() {
    String two = f1;
}Atm: @VarAnnot(4) Field  <:  Variable 0 at class Field extends type; tree <<missing tree>> within 
class Field {
    
    Field() {
        super();
    }
    static String f1 = "";
    static String f2 = f1;
    
    void test() {
        String two = f1;
    }
}

checkers.inference.FieldAccessConstraint(
contextVp: method Field#test():V constraint position; 
calledVp: class Field static field f1; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 1 at class Field static field f1; tree String); 
)

subtype constraint: Variable 1 at class Field static field f1; tree String  <:  Variable 5 at method Field#test():V local variable two(0); tree String

