Constraints:
SubtypeConstraint( Constant(@trusted.quals.Untrusted)  <:  Variable 0 at class DetachedVarTest2 extends type; tree <<missing tree>> within 
class DetachedVarTest2 {
    
    DetachedVarTest2() {
        super();
    }
    
    public String[] test2() {
        return null;
    }
} )

SubtypeConstraint( Variable 1 at method DetachedVarTest2#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 0 at class DetachedVarTest2 extends type; tree <<missing tree>> within 
class DetachedVarTest2 {
    
    DetachedVarTest2() {
        super();
    }
    
    public String[] test2() {
        return null;
    }
} )

StubBoardUseConstraint(java.lang.Object,java.lang.Object#<init>():void,method DetachedVarTest2#<init>():V constraint position,null,List(),List(),List(),List(),List(),List(Constant(@trusted.quals.Untrusted)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: method DetachedVarTest2#<init>():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@trusted.quals.Untrusted)); 
)

SubtypeConstraint( Variable 4 at method DetachedVarTest2#test2():[Ljava/lang/String; receiver; tree <<missing tree>> within 
public String[] test2() {
    return null;
}Atm: @VarAnnot(4) DetachedVarTest2  <:  Variable 0 at class DetachedVarTest2 extends type; tree <<missing tree>> within 
class DetachedVarTest2 {
    
    DetachedVarTest2() {
        super();
    }
    
    public String[] test2() {
        return null;
    }
} )

SubtypeConstraint( Literal(NULL_LITERAL, "null")  <:  Variable 2 at method DetachedVarTest2#test2():[Ljava/lang/String; return type; tree String[] )

