Constraints:
SubtypeConstraint( Variable 1 at class BoxingError class type parameter 0; tree A  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 1 at class BoxingError class type parameter 0; tree A  <:  Variable 0 at class BoxingError class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within AAtm: @VarAnnot(0) Object )

SubtypeConstraint( Variable 3 at class BoxingError class type parameter 1; tree B  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 3 at class BoxingError class type parameter 1; tree B  <:  Variable 2 at class BoxingError class type parameter bound 1 & 0; tree <<missing tree>> at position ((3,1)) within BAtm: @VarAnnot(2) Object )

SubtypeConstraint( Constant(@trusted.quals.Untrusted)  <:  Variable 4 at class BoxingError extends type; tree <<missing tree>> within 
public class BoxingError<A, B> {
    
    public BoxingError() {
        super();
    }
    
    public <C, D>D toAccess(C c1, D d1) {
        return d1;
    }
    
    public void localAccess() {
        toAccess('c', "BLAG");
    }
} )

SubtypeConstraint( Variable 5 at method BoxingError#<init>():V return type; tree 
public <init>() {
    super();
}  <:  Variable 4 at class BoxingError extends type; tree <<missing tree>> within 
public class BoxingError<A, B> {
    
    public BoxingError() {
        super();
    }
    
    public <C, D>D toAccess(C c1, D d1) {
        return d1;
    }
    
    public void localAccess() {
        toAccess('c', "BLAG");
    }
} )

SubtypeConstraint( Variable 11 at method BoxingError#toAccess(Ljava/lang/Object;Ljava/lang/Object;):Ljava/lang/Object; receiver; tree <<missing tree>> within 
public <C, D>D toAccess(C c1, D d1) {
    return d1;
}Atm: @VarAnnot(11) BoxingError<A extends Object, B extends Object>  <:  Variable 4 at class BoxingError extends type; tree <<missing tree>> within 
public class BoxingError<A, B> {
    
    public BoxingError() {
        super();
    }
    
    public <C, D>D toAccess(C c1, D d1) {
        return d1;
    }
    
    public void localAccess() {
        toAccess('c', "BLAG");
    }
} )

SubtypeConstraint( Variable 7 at method BoxingError#toAccess(Ljava/lang/Object;Ljava/lang/Object;):Ljava/lang/Object; method type parameter 0; tree C  <:  Variable 6 at method BoxingError#toAccess(Ljava/lang/Object;Ljava/lang/Object;):Ljava/lang/Object; method type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within CAtm: @VarAnnot(6) Object )

SubtypeConstraint( Variable 9 at method BoxingError#toAccess(Ljava/lang/Object;Ljava/lang/Object;):Ljava/lang/Object; method type parameter 1; tree D  <:  Variable 8 at method BoxingError#toAccess(Ljava/lang/Object;Ljava/lang/Object;):Ljava/lang/Object; method type parameter bound 1 & 0; tree <<missing tree>> at position ((3,1)) within DAtm: @VarAnnot(8) Object )

SubtypeConstraint( Variable 7 at method BoxingError#toAccess(Ljava/lang/Object;Ljava/lang/Object;):Ljava/lang/Object; method type parameter 0; tree C  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 12 at method BoxingError#toAccess(Ljava/lang/Object;Ljava/lang/Object;):Ljava/lang/Object; parameter 0; tree C  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 9 at method BoxingError#toAccess(Ljava/lang/Object;Ljava/lang/Object;):Ljava/lang/Object; method type parameter 1; tree D  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 13 at method BoxingError#toAccess(Ljava/lang/Object;Ljava/lang/Object;):Ljava/lang/Object; parameter 1; tree D  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 13 at method BoxingError#toAccess(Ljava/lang/Object;Ljava/lang/Object;):Ljava/lang/Object; parameter 1; tree D  <:  Variable 10 at method BoxingError#toAccess(Ljava/lang/Object;Ljava/lang/Object;):Ljava/lang/Object; return type; tree D )

SubtypeConstraint( Variable 10 at method BoxingError#toAccess(Ljava/lang/Object;Ljava/lang/Object;):Ljava/lang/Object; return type; tree D  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 14 at method BoxingError#localAccess():V receiver; tree <<missing tree>> within 
public void localAccess() {
    toAccess('c', "BLAG");
}Atm: @VarAnnot(14) BoxingError<A extends Object, B extends Object>  <:  Variable 4 at class BoxingError extends type; tree <<missing tree>> within 
public class BoxingError<A, B> {
    
    public BoxingError() {
        super();
    }
    
    public <C, D>D toAccess(C c1, D d1) {
        return d1;
    }
    
    public void localAccess() {
        toAccess('c', "BLAG");
    }
} )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method BoxingError#localAccess():V constraint position; 
calledVp: method BoxingError#toAccess(Ljava/lang/Object;Ljava/lang/Object;):Ljava/lang/Object;; 
receiver: Variable 14 at method BoxingError#localAccess():V receiver; tree <<missing tree>> within 
public void localAccess() {
    toAccess('c', "BLAG");
}Atm: @VarAnnot(14) BoxingError<A extends Object, B extends Object>; 
methodTypeParamLBs: < Variable 7 at method BoxingError#toAccess(Ljava/lang/Object;Ljava/lang/Object;):Ljava/lang/Object; method type parameter 0; tree C, Variable 9 at method BoxingError#toAccess(Ljava/lang/Object;Ljava/lang/Object;):Ljava/lang/Object; method type parameter 1; tree D >; 
classTypeParamLBs: < Variable 1 at class BoxingError class type parameter 0; tree A, Variable 3 at class BoxingError class type parameter 1; tree B >; 
methodTypeArgs: < List(Variable 15 at MethodTypeArgumentInMethodVP in method BoxingError#localAccess():V; tree <<missing tree>> at position ((3,0)) within toAccess('c', "BLAG")Atm: @VarAnnot(15) Object), List(Variable 16 at MethodTypeArgumentInMethodVP in method BoxingError#localAccess():V; tree <<missing tree>> at position ((3,1)) within toAccess('c', "BLAG")Atm: @VarAnnot(16) Object) >; 
classTypeArgs: < List(Variable 0 at class BoxingError class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within AAtm: @VarAnnot(0) Object), List(Variable 2 at class BoxingError class type parameter bound 1 & 0; tree <<missing tree>> at position ((3,1)) within BAtm: @VarAnnot(2) Object) >; 
args: ( Constant(@trusted.quals.Untrusted), Literal(STRING_LITERAL, "BLAG") ); 
result: List(Variable 10 at method BoxingError#toAccess(Ljava/lang/Object;Ljava/lang/Object;):Ljava/lang/Object; return type; tree D); 
)

SubtypeConstraint( Constant(@trusted.quals.Untrusted)  <:  Variable 17 at class OtherAccess extends type; tree <<missing tree>> within 
class OtherAccess {
    private BoxingError<String, Integer> gfAccess;
    
    public OtherAccess() {
        super();
        gfAccess = new BoxingError<String, Integer>();
    }
    
    public void localAccess() {
        gfAccess.toAccess('c', new Object());
    }
} )

SubtypeConstraint( Variable 18 at method OtherAccess#<init>():V return type; tree 
public <init>() {
    super();
    gfAccess = new BoxingError<String, Integer>();
}  <:  Variable 17 at class OtherAccess extends type; tree <<missing tree>> within 
class OtherAccess {
    private BoxingError<String, Integer> gfAccess;
    
    public OtherAccess() {
        super();
        gfAccess = new BoxingError<String, Integer>();
    }
    
    public void localAccess() {
        gfAccess.toAccess('c', new Object());
    }
} )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method OtherAccess#<init>():V constraint position; 
calledVp: method BoxingError#<init>():V; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Variable 1 at class BoxingError class type parameter 0; tree A, Variable 3 at class BoxingError class type parameter 1; tree B >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 24 at method OtherAccess#<init>():V creation 0; tree String at position ((3,0)) within BoxingError<String, Integer>), List(Variable 25 at method OtherAccess#<init>():V creation 0; tree Integer at position ((3,1)) within BoxingError<String, Integer>) >; 
args: (  ); 
result: List(Variable 5 at method BoxingError#<init>():V return type; tree 
public <init>() {
    super();
}); 
)

SubtypeConstraint( RefinementVariable #26 Declared Variable: Variable 20 at class OtherAccess field gfAccess; tree BoxingError within BoxingError<String, Integer> IfTest: false mergedTo: Set()  <:  Variable 20 at class OtherAccess field gfAccess; tree BoxingError within BoxingError<String, Integer> )

checkers.inference.FieldAssignmentConstraint(
contextVp: method OtherAccess#<init>():V constraint position; 
calledVp: class OtherAccess field gfAccess; 
receiver: Constant(@trusted.quals.Untrusted); 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: ( Variable 23 at method OtherAccess#<init>():V creation 0; tree BoxingError within BoxingError<String, Integer>, Variable 24 at method OtherAccess#<init>():V creation 0; tree String at position ((3,0)) within BoxingError<String, Integer>, Variable 25 at method OtherAccess#<init>():V creation 0; tree Integer at position ((3,1)) within BoxingError<String, Integer> ); 
result: List(); 
)

EqualityConstraint( RefinementVariable #26 Declared Variable: Variable 20 at class OtherAccess field gfAccess; tree BoxingError within BoxingError<String, Integer> IfTest: false mergedTo: Set() = Variable 23 at method OtherAccess#<init>():V creation 0; tree BoxingError within BoxingError<String, Integer> )

SubtypeConstraint( Variable 23 at method OtherAccess#<init>():V creation 0; tree BoxingError within BoxingError<String, Integer>  <:  Variable 20 at class OtherAccess field gfAccess; tree BoxingError within BoxingError<String, Integer> )

SubtypeConstraint( Variable 19 at method OtherAccess#localAccess():V receiver; tree <<missing tree>> within 
public void localAccess() {
    gfAccess.toAccess('c', new Object());
}Atm: @VarAnnot(19) OtherAccess  <:  Variable 17 at class OtherAccess extends type; tree <<missing tree>> within 
class OtherAccess {
    private BoxingError<String, Integer> gfAccess;
    
    public OtherAccess() {
        super();
        gfAccess = new BoxingError<String, Integer>();
    }
    
    public void localAccess() {
        gfAccess.toAccess('c', new Object());
    }
} )

checkers.inference.FieldAccessConstraint(
contextVp: method OtherAccess#localAccess():V constraint position; 
calledVp: class OtherAccess field gfAccess; 
receiver: Variable 19 at method OtherAccess#localAccess():V receiver; tree <<missing tree>> within 
public void localAccess() {
    gfAccess.toAccess('c', new Object());
}Atm: @VarAnnot(19) OtherAccess; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 20 at class OtherAccess field gfAccess; tree BoxingError within BoxingError<String, Integer>, Variable 21 at class OtherAccess field gfAccess; tree String at position ((3,0)) within BoxingError<String, Integer>, Variable 22 at class OtherAccess field gfAccess; tree Integer at position ((3,1)) within BoxingError<String, Integer>); 
)

checkers.inference.InstanceMethodCallConstraint(
contextVp: method OtherAccess#localAccess():V constraint position; 
calledVp: method BoxingError#toAccess(Ljava/lang/Object;Ljava/lang/Object;):Ljava/lang/Object;; 
receiver: Variable 20 at class OtherAccess field gfAccess; tree BoxingError within BoxingError<String, Integer>; 
methodTypeParamLBs: < Variable 7 at method BoxingError#toAccess(Ljava/lang/Object;Ljava/lang/Object;):Ljava/lang/Object; method type parameter 0; tree C, Variable 9 at method BoxingError#toAccess(Ljava/lang/Object;Ljava/lang/Object;):Ljava/lang/Object; method type parameter 1; tree D >; 
classTypeParamLBs: < Variable 1 at class BoxingError class type parameter 0; tree A, Variable 3 at class BoxingError class type parameter 1; tree B >; 
methodTypeArgs: < List(Variable 28 at MethodTypeArgumentInMethodVP in method OtherAccess#localAccess():V; tree <<missing tree>> at position ((3,0)) within gfAccess.toAccess('c', new Object())Atm: @VarAnnot(28) Object), List(Variable 29 at MethodTypeArgumentInMethodVP in method OtherAccess#localAccess():V; tree <<missing tree>> at position ((3,1)) within gfAccess.toAccess('c', new Object())Atm: @VarAnnot(29) Object) >; 
classTypeArgs: < List(Variable 21 at class OtherAccess field gfAccess; tree String at position ((3,0)) within BoxingError<String, Integer>), List(Variable 22 at class OtherAccess field gfAccess; tree Integer at position ((3,1)) within BoxingError<String, Integer>) >; 
args: ( Constant(@trusted.quals.Untrusted), Variable 27 at method OtherAccess#localAccess():V creation 0; tree Object ); 
result: List(Variable 10 at method BoxingError#toAccess(Ljava/lang/Object;Ljava/lang/Object;):Ljava/lang/Object; return type; tree D); 
)

