Constraints:
SubtypeConstraint( Constant(@trusted.quals.Untrusted)  <:  Variable 0 at class Outer extends type; tree <<missing tree>> within 
class Outer {
    
    Outer() {
        super();
    }
    
    public static class Inner<T1> {
        
        public Inner() {
            super();
        }
    }
    
    public Inner<String> method() {
        return new Implementor<String>();
    }
} )

SubtypeConstraint( Variable 1 at method Outer#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 0 at class Outer extends type; tree <<missing tree>> within 
class Outer {
    
    Outer() {
        super();
    }
    
    public static class Inner<T1> {
        
        public Inner() {
            super();
        }
    }
    
    public Inner<String> method() {
        return new Implementor<String>();
    }
} )

StubBoardUseConstraint(java.lang.Object,java.lang.Object#<init>():void,method Outer#<init>():V constraint position,null,List(),List(),List(),List(),List(),List(Constant(@trusted.quals.Untrusted)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: method Outer#<init>():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@trusted.quals.Untrusted)); 
)

SubtypeConstraint( Variable 9 at class Outer$Inner class type parameter 0; tree T1  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 9 at class Outer$Inner class type parameter 0; tree T1  <:  Variable 8 at class Outer$Inner class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within T1Atm: @VarAnnot(8) Object )

SubtypeConstraint( Constant(@trusted.quals.Untrusted)  <:  Variable 10 at class Outer$Inner extends type; tree <<missing tree>> within 
public static class Inner<T1> {
    
    public Inner() {
        super();
    }
} )

SubtypeConstraint( Variable 11 at method Outer$Inner#<init>():V return type; tree 
public <init>() {
    super();
}  <:  Variable 10 at class Outer$Inner extends type; tree <<missing tree>> within 
public static class Inner<T1> {
    
    public Inner() {
        super();
    }
} )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method Outer$Inner#<init>():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@trusted.quals.Untrusted)); 
)

SubtypeConstraint( Variable 4 at method Outer#method():LOuter$Inner; receiver; tree <<missing tree>> within 
public Inner<String> method() {
    return new Implementor<String>();
}Atm: @VarAnnot(4) Outer  <:  Variable 0 at class Outer extends type; tree <<missing tree>> within 
class Outer {
    
    Outer() {
        super();
    }
    
    public static class Inner<T1> {
        
        public Inner() {
            super();
        }
    }
    
    public Inner<String> method() {
        return new Implementor<String>();
    }
} )

SubtypeConstraint( Variable 3 at method Outer#method():LOuter$Inner; return type; tree String at position ((3,0)) within Inner<String>  <:  Variable 8 at class Outer$Inner class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within T1Atm: @VarAnnot(8) Object )

SubtypeConstraint( Variable 9 at class Outer$Inner class type parameter 0; tree T1  <:  Variable 3 at method Outer#method():LOuter$Inner; return type; tree String at position ((3,0)) within Inner<String> )

SubtypeConstraint( Variable 6 at method Outer#method():LOuter$Inner; creation 0; tree Implementor within Implementor<String>  <:  Variable 2 at method Outer#method():LOuter$Inner; return type; tree Inner within Inner<String> )

EqualityConstraint( Variable 3 at method Outer#method():LOuter$Inner; return type; tree String at position ((3,0)) within Inner<String> = Variable 7 at method Outer#method():LOuter$Inner; creation 0; tree String at position ((3,0)) within Implementor<String> )

SubtypeConstraint( Variable 13 at class Implementor class type parameter 0; tree T2  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 13 at class Implementor class type parameter 0; tree T2  <:  Variable 12 at class Implementor class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within T2Atm: @VarAnnot(12) Object )

SubtypeConstraint( Constant(@trusted.quals.Untrusted)  <:  Variable 14 at class Implementor extends type; tree Outer.Inner within Outer.Inner<T2> )

SubtypeConstraint( Variable 5 at method Implementor#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 14 at class Implementor extends type; tree Outer.Inner within Outer.Inner<T2> )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method Implementor#<init>():V constraint position; 
calledVp: Some(method Outer$Inner#<init>():V); 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Variable 9 at class Outer$Inner class type parameter 0; tree T1 >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 8 at class Outer$Inner class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within T1Atm: @VarAnnot(8) Object) >; 
args: (  ); 
result: List(Variable 11 at method Outer$Inner#<init>():V return type; tree 
public <init>() {
    super();
}); 
)

SubtypeConstraint( Variable 11 at method Outer$Inner#<init>():V return type; tree 
public <init>() {
    super();
}  <:  Constant(@trusted.quals.Untrusted) )

