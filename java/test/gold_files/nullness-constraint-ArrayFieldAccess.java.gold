Constraints:
subtype constraint: Constant(@nninf.quals.Nullable)  <:  Variable 0 at class MyObj extends type; tree <<missing tree>> within 
class MyObj {
    
    MyObj() {
        super();
    }
}

subtype constraint: Variable 1 at method MyObj#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 0 at class MyObj extends type; tree <<missing tree>> within 
class MyObj {
    
    MyObj() {
        super();
    }
}

equality constraint: Variable 7 at method ArrayFieldAccess#context():V local variable i(0); tree int = Constant(@nninf.quals.NonNull)

subtype constraint: Constant(@nninf.quals.Nullable)  <:  Variable 2 at class ArrayFieldAccess extends type; tree <<missing tree>> within 
class ArrayFieldAccess {
    
    ArrayFieldAccess() {
        super();
    }
    private MyObj[] array;
    
    public void context() {
        int i = array.length;
        array[i] = new MyObj();
    }
}

subtype constraint: Variable 3 at method ArrayFieldAccess#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 2 at class ArrayFieldAccess extends type; tree <<missing tree>> within 
class ArrayFieldAccess {
    
    ArrayFieldAccess() {
        super();
    }
    private MyObj[] array;
    
    public void context() {
        int i = array.length;
        array[i] = new MyObj();
    }
}

subtype constraint: Variable 4 at method ArrayFieldAccess#context():V receiver; tree <<missing tree>> within 
public void context() {
    int i = array.length;
    array[i] = new MyObj();
}Atm: @VarAnnot(4) ArrayFieldAccess  <:  Variable 2 at class ArrayFieldAccess extends type; tree <<missing tree>> within 
class ArrayFieldAccess {
    
    ArrayFieldAccess() {
        super();
    }
    private MyObj[] array;
    
    public void context() {
        int i = array.length;
        array[i] = new MyObj();
    }
}

checkers.inference.FieldAccessConstraint(
contextVp: method ArrayFieldAccess#context():V constraint position; 
calledVp: class ArrayFieldAccess field array; 
receiver: Variable 4 at method ArrayFieldAccess#context():V receiver; tree <<missing tree>> within 
public void context() {
    int i = array.length;
    array[i] = new MyObj();
}Atm: @VarAnnot(4) ArrayFieldAccess; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 5 at class ArrayFieldAccess field array; tree MyObj[], Variable 6 at class ArrayFieldAccess field array; tree MyObj at position ((0,0)) within MyObj[]); 
)

inequality constraint at method ArrayFieldAccess#context():V constraint position: Variable 5 at class ArrayFieldAccess field array; tree MyObj[] != Constant(@nninf.quals.Nullable)

checkers.inference.FieldAccessConstraint(
contextVp: method ArrayFieldAccess#context():V constraint position; 
calledVp: class ArrayFieldAccess field array; 
receiver: Variable 4 at method ArrayFieldAccess#context():V receiver; tree <<missing tree>> within 
public void context() {
    int i = array.length;
    array[i] = new MyObj();
}Atm: @VarAnnot(4) ArrayFieldAccess; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 5 at class ArrayFieldAccess field array; tree MyObj[], Variable 6 at class ArrayFieldAccess field array; tree MyObj at position ((0,0)) within MyObj[]); 
)

checkers.inference.InstanceMethodCallConstraint(
contextVp: method ArrayFieldAccess#context():V constraint position; 
calledVp: method MyObj#<init>():V; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 1 at method MyObj#<init>():V return type; tree 
<init>() {
    super();
}); 
)

inequality constraint at method ArrayFieldAccess#context():V constraint position: Variable 8 at method ArrayFieldAccess#context():V creation 0; tree MyObj != Constant(@nninf.quals.Nullable)

subtype constraint: Variable 8 at method ArrayFieldAccess#context():V creation 0; tree MyObj  <:  Variable 6 at class ArrayFieldAccess field array; tree MyObj at position ((0,0)) within MyObj[]

