Constraints:
SubtypeConstraint( Variable 1 at class generics.Base class type parameter 0; tree X  <:  Variable 0 at class generics.Base class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within XAtm: @VarAnnot(0) Object )

SubtypeConstraint( Variable 3 at class generics.Base class type parameter 1; tree Y  <:  Variable 2 at class generics.Base class type parameter bound 1 & 0; tree <<missing tree>> at position ((3,1)) within YAtm: @VarAnnot(2) Object )

SubtypeConstraint( Variable 10 at class generics.Base field x; tree X  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 11 at class generics.Base field y; tree Y  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Constant(@trusted.quals.Untrusted)  <:  Variable 4 at class generics.Base extends type; tree <<missing tree>> within 
abstract class Base<X, Y> {
    protected X x;
    protected Y y;
    
    public Base(final X x, final Y y) {
        super();
        this.x = x;
        this.y = y;
    }
    
    public abstract void set(X x);
} )

SubtypeConstraint( Variable 5 at method generics.Base#<init>(Ljava/lang/Object;Ljava/lang/Object;):V return type; tree 
public <init>(final X x, final Y y) {
    super();
    this.x = x;
    this.y = y;
}  <:  Variable 4 at class generics.Base extends type; tree <<missing tree>> within 
abstract class Base<X, Y> {
    protected X x;
    protected Y y;
    
    public Base(final X x, final Y y) {
        super();
        this.x = x;
        this.y = y;
    }
    
    public abstract void set(X x);
} )

SubtypeConstraint( Variable 1 at class generics.Base class type parameter 0; tree X  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 3 at class generics.Base class type parameter 1; tree Y  <:  Constant(@trusted.quals.Untrusted) )

StubBoardUseConstraint(java.lang.Object,java.lang.Object#<init>():void,method generics.Base#<init>(Ljava/lang/Object;Ljava/lang/Object;):V constraint position,null,List(),List(),List(),List(),List(),List(Constant(@trusted.quals.Untrusted)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: method generics.Base#<init>(Ljava/lang/Object;Ljava/lang/Object;):V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@trusted.quals.Untrusted)); 
)

SubtypeConstraint( Variable 1 at class generics.Base class type parameter 0; tree X  <:  Variable 10 at class generics.Base field x; tree X )

checkers.inference.FieldAssignmentConstraint(
contextVp: method generics.Base#<init>(Ljava/lang/Object;Ljava/lang/Object;):V constraint position; 
calledVp: Some(class generics.Base field x); 
receiver: Constant(@trusted.quals.Untrusted); 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Variable 1 at class generics.Base class type parameter 0; tree X, Variable 3 at class generics.Base class type parameter 1; tree Y >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 0 at class generics.Base class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within XAtm: @VarAnnot(0) Object), List(Variable 2 at class generics.Base class type parameter bound 1 & 0; tree <<missing tree>> at position ((3,1)) within YAtm: @VarAnnot(2) Object) >; 
args: ( Variable 1 at class generics.Base class type parameter 0; tree X ); 
result: List(); 
)

SubtypeConstraint( Variable 3 at class generics.Base class type parameter 1; tree Y  <:  Variable 11 at class generics.Base field y; tree Y )

checkers.inference.FieldAssignmentConstraint(
contextVp: method generics.Base#<init>(Ljava/lang/Object;Ljava/lang/Object;):V constraint position; 
calledVp: Some(class generics.Base field y); 
receiver: Constant(@trusted.quals.Untrusted); 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Variable 1 at class generics.Base class type parameter 0; tree X, Variable 3 at class generics.Base class type parameter 1; tree Y >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 0 at class generics.Base class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within XAtm: @VarAnnot(0) Object), List(Variable 2 at class generics.Base class type parameter bound 1 & 0; tree <<missing tree>> at position ((3,1)) within YAtm: @VarAnnot(2) Object) >; 
args: ( Variable 3 at class generics.Base class type parameter 1; tree Y ); 
result: List(); 
)

SubtypeConstraint( Variable 8 at method generics.Base#set(Ljava/lang/Object;):V receiver; tree <<missing tree>> within 
public abstract void set(X x);Atm: @VarAnnot(8) Base<X extends Object, Y extends Object>  <:  Variable 4 at class generics.Base extends type; tree <<missing tree>> within 
abstract class Base<X, Y> {
    protected X x;
    protected Y y;
    
    public Base(final X x, final Y y) {
        super();
        this.x = x;
        this.y = y;
    }
    
    public abstract void set(X x);
} )

SubtypeConstraint( Variable 13 at class generics.PrintBase class type parameter 0; tree X2  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 13 at class generics.PrintBase class type parameter 0; tree X2  <:  Variable 12 at class generics.PrintBase class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within X2Atm: @VarAnnot(12) Object )

SubtypeConstraint( Constant(@trusted.quals.Untrusted)  <:  Variable 14 at class generics.PrintBase extends type; tree Base within Base<X2, String> )

SubtypeConstraint( Variable 16 at method generics.PrintBase#<init>(Ljava/lang/Object;Ljava/lang/String;):V return type; tree 
public <init>(final X2 x, final String y) {
    super(x, y);
}  <:  Variable 14 at class generics.PrintBase extends type; tree Base within Base<X2, String> )

SubtypeConstraint( Variable 6 at method generics.Base#<init>(Ljava/lang/Object;Ljava/lang/Object;):V parameter 0; tree X  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 7 at method generics.Base#<init>(Ljava/lang/Object;Ljava/lang/Object;):V parameter 1; tree Y  <:  Constant(@trusted.quals.Untrusted) )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method generics.PrintBase#<init>(Ljava/lang/Object;Ljava/lang/String;):V constraint position; 
calledVp: Some(method generics.Base#<init>(Ljava/lang/Object;Ljava/lang/Object;):V); 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Variable 1 at class generics.Base class type parameter 0; tree X, Variable 3 at class generics.Base class type parameter 1; tree Y >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 0 at class generics.Base class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within XAtm: @VarAnnot(0) Object), List(Variable 2 at class generics.Base class type parameter bound 1 & 0; tree <<missing tree>> at position ((3,1)) within YAtm: @VarAnnot(2) Object) >; 
args: ( Variable 13 at class generics.PrintBase class type parameter 0; tree X2, Variable 18 at method generics.PrintBase#<init>(Ljava/lang/Object;Ljava/lang/String;):V parameter 1; tree String ); 
result: List(Variable 5 at method generics.Base#<init>(Ljava/lang/Object;Ljava/lang/Object;):V return type; tree 
public <init>(final X x, final Y y) {
    super();
    this.x = x;
    this.y = y;
}); 
)

SubtypeConstraint( Variable 5 at method generics.Base#<init>(Ljava/lang/Object;Ljava/lang/Object;):V return type; tree 
public <init>(final X x, final Y y) {
    super();
    this.x = x;
    this.y = y;
}  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 19 at method generics.PrintBase#set(Ljava/lang/Object;):V receiver; tree <<missing tree>> within 
public void set(X2 x) {
    this.x = x;
}Atm: @VarAnnot(19) PrintBase<X2 extends Object>  <:  Variable 14 at class generics.PrintBase extends type; tree Base within Base<X2, String> )

SubtypeConstraint( Variable 9 at method generics.Base#set(Ljava/lang/Object;):V parameter 0; tree X  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 9 at method generics.Base#set(Ljava/lang/Object;):V parameter 0; tree X  <:  Variable 20 at method generics.PrintBase#set(Ljava/lang/Object;):V parameter 0; tree X2 )

SubtypeConstraint( Variable 20 at method generics.PrintBase#set(Ljava/lang/Object;):V parameter 0; tree X2  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 13 at class generics.PrintBase class type parameter 0; tree X2  <:  Variable 10 at class generics.Base field x; tree X )

checkers.inference.FieldAssignmentConstraint(
contextVp: method generics.PrintBase#set(Ljava/lang/Object;):V constraint position; 
calledVp: Some(class generics.Base field x); 
receiver: Variable 19 at method generics.PrintBase#set(Ljava/lang/Object;):V receiver; tree <<missing tree>> within 
public void set(X2 x) {
    this.x = x;
}Atm: @VarAnnot(19) PrintBase<X2 extends Object>; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Variable 1 at class generics.Base class type parameter 0; tree X, Variable 3 at class generics.Base class type parameter 1; tree Y >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 12 at class generics.PrintBase class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within X2Atm: @VarAnnot(12) Object), List(Constant(@trusted.quals.Untrusted)) >; 
args: ( Variable 13 at class generics.PrintBase class type parameter 0; tree X2 ); 
result: List(); 
)

SubtypeConstraint( Constant(@trusted.quals.Untrusted)  <:  Variable 21 at class generics.Instantiate extends type; tree <<missing tree>> within 
class Instantiate {
    
    Instantiate() {
        super();
    }
    
    public void create() {
        final Base<Integer, String> bis = new PrintBase<Integer>(new Integer(0), "Y");
        bis.set(new Integer(3));
    }
} )

SubtypeConstraint( Variable 22 at method generics.Instantiate#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 21 at class generics.Instantiate extends type; tree <<missing tree>> within 
class Instantiate {
    
    Instantiate() {
        super();
    }
    
    public void create() {
        final Base<Integer, String> bis = new PrintBase<Integer>(new Integer(0), "Y");
        bis.set(new Integer(3));
    }
} )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method generics.Instantiate#<init>():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@trusted.quals.Untrusted)); 
)

SubtypeConstraint( Variable 23 at method generics.Instantiate#create():V receiver; tree <<missing tree>> within 
public void create() {
    final Base<Integer, String> bis = new PrintBase<Integer>(new Integer(0), "Y");
    bis.set(new Integer(3));
}Atm: @VarAnnot(23) Instantiate  <:  Variable 21 at class generics.Instantiate extends type; tree <<missing tree>> within 
class Instantiate {
    
    Instantiate() {
        super();
    }
    
    public void create() {
        final Base<Integer, String> bis = new PrintBase<Integer>(new Integer(0), "Y");
        bis.set(new Integer(3));
    }
} )

SubtypeConstraint( Variable 17 at method generics.PrintBase#<init>(Ljava/lang/Object;Ljava/lang/String;):V parameter 0; tree X2  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 24 at method generics.Instantiate#create():V creation 1; tree Integer  <:  Variable 17 at method generics.PrintBase#<init>(Ljava/lang/Object;Ljava/lang/String;):V parameter 0; tree X2 )

SubtypeConstraint( Variable 24 at method generics.Instantiate#create():V creation 1; tree Integer  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Literal(INT_LITERAL, "0")  <:  Constant(@trusted.quals.Untrusted) )

StubBoardUseConstraint(java.lang.Integer,java.lang.Integer#<init>(I):void,method generics.Instantiate#create():V constraint position,null,List(),List(),List(),List(),List(Constant(@trusted.quals.Untrusted)),List(Constant(@trusted.quals.Untrusted)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: method generics.Instantiate#create():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: ( Literal(INT_LITERAL, "0") ); 
result: List(Constant(@trusted.quals.Untrusted)); 
)

SubtypeConstraint( Literal(STRING_LITERAL, "Y")  <:  Variable 18 at method generics.PrintBase#<init>(Ljava/lang/Object;Ljava/lang/String;):V parameter 1; tree String )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method generics.Instantiate#create():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: ( Literal(INT_LITERAL, "0") ); 
result: List(Constant(@trusted.quals.Untrusted)); 
)

checkers.inference.InstanceMethodCallConstraint(
contextVp: method generics.Instantiate#create():V constraint position; 
calledVp: Some(method generics.PrintBase#<init>(Ljava/lang/Object;Ljava/lang/String;):V); 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Variable 13 at class generics.PrintBase class type parameter 0; tree X2 >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 29 at method generics.Instantiate#create():V creation 0; tree Integer at position ((3,0)) within PrintBase<Integer>) >; 
args: ( Variable 24 at method generics.Instantiate#create():V creation 1; tree Integer, Literal(STRING_LITERAL, "Y") ); 
result: List(Variable 16 at method generics.PrintBase#<init>(Ljava/lang/Object;Ljava/lang/String;):V return type; tree 
public <init>(final X2 x, final String y) {
    super(x, y);
}); 
)

SubtypeConstraint( Variable 28 at method generics.Instantiate#create():V creation 0; tree PrintBase within PrintBase<Integer>  <:  Variable 25 at method generics.Instantiate#create():V local variable bis(0); tree Base within Base<Integer, String> )

EqualityConstraint( Variable 26 at method generics.Instantiate#create():V local variable bis(0); tree Integer at position ((3,0)) within Base<Integer, String> = Variable 29 at method generics.Instantiate#create():V creation 0; tree Integer at position ((3,0)) within PrintBase<Integer> )

SubtypeConstraint( Literal(INT_LITERAL, "3")  <:  Constant(@trusted.quals.Untrusted) )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method generics.Instantiate#create():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: ( Literal(INT_LITERAL, "3") ); 
result: List(Constant(@trusted.quals.Untrusted)); 
)

checkers.inference.InstanceMethodCallConstraint(
contextVp: method generics.Instantiate#create():V constraint position; 
calledVp: Some(method generics.Base#set(Ljava/lang/Object;):V); 
receiver: Variable 25 at method generics.Instantiate#create():V local variable bis(0); tree Base within Base<Integer, String>; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Variable 1 at class generics.Base class type parameter 0; tree X, Variable 3 at class generics.Base class type parameter 1; tree Y >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 26 at method generics.Instantiate#create():V local variable bis(0); tree Integer at position ((3,0)) within Base<Integer, String>), List(Variable 27 at method generics.Instantiate#create():V local variable bis(0); tree String at position ((3,1)) within Base<Integer, String>) >; 
args: ( Variable 30 at method generics.Instantiate#create():V creation 2; tree Integer ); 
result: List(); 
)

