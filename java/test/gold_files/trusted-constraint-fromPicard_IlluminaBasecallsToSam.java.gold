Constraints:
SubtypeConstraint( Constant(@trusted.quals.Untrusted)  <:  Variable 0 at class fromPicard.IlluminaDataType extends type; tree <<missing tree>> within 
enum IlluminaDataType {
    /*public static final*/ Position /* = new IlluminaDataType() */,
    /*public static final*/ BaseCalls /* = new IlluminaDataType() */,
    /*public static final*/ QualityScores /* = new IlluminaDataType() */,
    /*public static final*/ RawIntensities /* = new IlluminaDataType() */,
    /*public static final*/ Noise /* = new IlluminaDataType() */,
    /*public static final*/ PF /* = new IlluminaDataType() */,
    /*public static final*/ Barcodes /* = new IlluminaDataType() */;
    
    private IlluminaDataType() {
        super();
    }
} )

SubtypeConstraint( Variable 15 at method fromPicard.IlluminaDataType#<init>():V return type; tree 
private <init>() {
    super();
}  <:  Variable 0 at class fromPicard.IlluminaDataType extends type; tree <<missing tree>> within 
enum IlluminaDataType {
    /*public static final*/ Position /* = new IlluminaDataType() */,
    /*public static final*/ BaseCalls /* = new IlluminaDataType() */,
    /*public static final*/ QualityScores /* = new IlluminaDataType() */,
    /*public static final*/ RawIntensities /* = new IlluminaDataType() */,
    /*public static final*/ Noise /* = new IlluminaDataType() */,
    /*public static final*/ PF /* = new IlluminaDataType() */,
    /*public static final*/ Barcodes /* = new IlluminaDataType() */;
    
    private IlluminaDataType() {
        super();
    }
} )

StubBoardUseConstraint(java.lang.Enum,java.lang.Enum#<init>(java.lang.StringI):void,method fromPicard.IlluminaDataType#<init>():V constraint position,null,List(),List(Constant(@trusted.quals.Untrusted)),List(),List(List(Constant(@trusted.quals.Trusted))),List(Constant(@trusted.quals.Untrusted), Constant(@trusted.quals.Untrusted)),List(Constant(@trusted.quals.Untrusted)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: method fromPicard.IlluminaDataType#<init>():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Constant(@trusted.quals.Untrusted) >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Constant(@trusted.quals.Untrusted), Constant(@trusted.quals.Untrusted)) >; 
args: (  ); 
result: List(Constant(@trusted.quals.Untrusted)); 
)

checkers.inference.FieldAccessConstraint(
contextVp: class fromPicard.IlluminaDataType static field Position constraint position; 
calledVp: Some(class fromPicard.IlluminaDataType static field Position); 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@trusted.quals.Untrusted)); 
)

checkers.inference.InstanceMethodCallConstraint(
contextVp: class fromPicard.IlluminaDataType static field Position constraint position; 
calledVp: Some(method fromPicard.IlluminaDataType#<init>():V); 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 15 at method fromPicard.IlluminaDataType#<init>():V return type; tree 
private <init>() {
    super();
}); 
)

SubtypeConstraint( Variable 1 at class fromPicard.IlluminaDataType static field Position creation -1; tree IlluminaDataType  <:  Variable 2 at class fromPicard.IlluminaDataType static field Position; tree IlluminaDataType )

checkers.inference.FieldAccessConstraint(
contextVp: class fromPicard.IlluminaDataType static field BaseCalls constraint position; 
calledVp: Some(class fromPicard.IlluminaDataType static field BaseCalls); 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@trusted.quals.Untrusted)); 
)

checkers.inference.InstanceMethodCallConstraint(
contextVp: class fromPicard.IlluminaDataType static field BaseCalls constraint position; 
calledVp: Some(method fromPicard.IlluminaDataType#<init>():V); 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 15 at method fromPicard.IlluminaDataType#<init>():V return type; tree 
private <init>() {
    super();
}); 
)

SubtypeConstraint( Variable 3 at class fromPicard.IlluminaDataType static field BaseCalls creation -1; tree IlluminaDataType  <:  Variable 4 at class fromPicard.IlluminaDataType static field BaseCalls; tree IlluminaDataType )

checkers.inference.FieldAccessConstraint(
contextVp: class fromPicard.IlluminaDataType static field QualityScores constraint position; 
calledVp: Some(class fromPicard.IlluminaDataType static field QualityScores); 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@trusted.quals.Untrusted)); 
)

checkers.inference.InstanceMethodCallConstraint(
contextVp: class fromPicard.IlluminaDataType static field QualityScores constraint position; 
calledVp: Some(method fromPicard.IlluminaDataType#<init>():V); 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 15 at method fromPicard.IlluminaDataType#<init>():V return type; tree 
private <init>() {
    super();
}); 
)

SubtypeConstraint( Variable 5 at class fromPicard.IlluminaDataType static field QualityScores creation -1; tree IlluminaDataType  <:  Variable 6 at class fromPicard.IlluminaDataType static field QualityScores; tree IlluminaDataType )

checkers.inference.FieldAccessConstraint(
contextVp: class fromPicard.IlluminaDataType static field RawIntensities constraint position; 
calledVp: Some(class fromPicard.IlluminaDataType static field RawIntensities); 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@trusted.quals.Untrusted)); 
)

checkers.inference.InstanceMethodCallConstraint(
contextVp: class fromPicard.IlluminaDataType static field RawIntensities constraint position; 
calledVp: Some(method fromPicard.IlluminaDataType#<init>():V); 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 15 at method fromPicard.IlluminaDataType#<init>():V return type; tree 
private <init>() {
    super();
}); 
)

SubtypeConstraint( Variable 7 at class fromPicard.IlluminaDataType static field RawIntensities creation -1; tree IlluminaDataType  <:  Variable 8 at class fromPicard.IlluminaDataType static field RawIntensities; tree IlluminaDataType )

checkers.inference.FieldAccessConstraint(
contextVp: class fromPicard.IlluminaDataType static field Noise constraint position; 
calledVp: Some(class fromPicard.IlluminaDataType static field Noise); 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@trusted.quals.Untrusted)); 
)

checkers.inference.InstanceMethodCallConstraint(
contextVp: class fromPicard.IlluminaDataType static field Noise constraint position; 
calledVp: Some(method fromPicard.IlluminaDataType#<init>():V); 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 15 at method fromPicard.IlluminaDataType#<init>():V return type; tree 
private <init>() {
    super();
}); 
)

SubtypeConstraint( Variable 9 at class fromPicard.IlluminaDataType static field Noise creation -1; tree IlluminaDataType  <:  Variable 10 at class fromPicard.IlluminaDataType static field Noise; tree IlluminaDataType )

checkers.inference.FieldAccessConstraint(
contextVp: class fromPicard.IlluminaDataType static field PF constraint position; 
calledVp: Some(class fromPicard.IlluminaDataType static field PF); 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@trusted.quals.Untrusted)); 
)

checkers.inference.InstanceMethodCallConstraint(
contextVp: class fromPicard.IlluminaDataType static field PF constraint position; 
calledVp: Some(method fromPicard.IlluminaDataType#<init>():V); 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 15 at method fromPicard.IlluminaDataType#<init>():V return type; tree 
private <init>() {
    super();
}); 
)

SubtypeConstraint( Variable 11 at class fromPicard.IlluminaDataType static field PF creation -1; tree IlluminaDataType  <:  Variable 12 at class fromPicard.IlluminaDataType static field PF; tree IlluminaDataType )

checkers.inference.FieldAccessConstraint(
contextVp: class fromPicard.IlluminaDataType static field Barcodes constraint position; 
calledVp: Some(class fromPicard.IlluminaDataType static field Barcodes); 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@trusted.quals.Untrusted)); 
)

checkers.inference.InstanceMethodCallConstraint(
contextVp: class fromPicard.IlluminaDataType static field Barcodes constraint position; 
calledVp: Some(method fromPicard.IlluminaDataType#<init>():V); 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 15 at method fromPicard.IlluminaDataType#<init>():V return type; tree 
private <init>() {
    super();
}); 
)

SubtypeConstraint( Variable 13 at class fromPicard.IlluminaDataType static field Barcodes creation -1; tree IlluminaDataType  <:  Variable 14 at class fromPicard.IlluminaDataType static field Barcodes; tree IlluminaDataType )

SubtypeConstraint( Constant(@trusted.quals.Untrusted)  <:  Variable 16 at class fromPicard.IlluminaBasecallsToSam extends type; tree <<missing tree>> within 
public class IlluminaBasecallsToSam {
    
    public IlluminaBasecallsToSam() {
        super();
    }
    public static final IlluminaDataType[] DATA_TYPES_NO_BARCODE = {IlluminaDataType.BaseCalls, IlluminaDataType.QualityScores, IlluminaDataType.Position, IlluminaDataType.PF};
} )

SubtypeConstraint( Variable 20 at method fromPicard.IlluminaBasecallsToSam#<init>():V return type; tree 
public <init>() {
    super();
}  <:  Variable 16 at class fromPicard.IlluminaBasecallsToSam extends type; tree <<missing tree>> within 
public class IlluminaBasecallsToSam {
    
    public IlluminaBasecallsToSam() {
        super();
    }
    public static final IlluminaDataType[] DATA_TYPES_NO_BARCODE = {IlluminaDataType.BaseCalls, IlluminaDataType.QualityScores, IlluminaDataType.Position, IlluminaDataType.PF};
} )

StubBoardUseConstraint(java.lang.Object,java.lang.Object#<init>():void,method fromPicard.IlluminaBasecallsToSam#<init>():V constraint position,null,List(),List(),List(),List(),List(),List(Constant(@trusted.quals.Untrusted)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: method fromPicard.IlluminaBasecallsToSam#<init>():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@trusted.quals.Untrusted)); 
)

SubtypeConstraint( Variable 17 at class fromPicard.IlluminaBasecallsToSam static field DATA_TYPES_NO_BARCODE creation 0; tree {IlluminaDataType.BaseCalls, IlluminaDataType.QualityScores, IlluminaDataType.Position, IlluminaDataType.PF}  <:  Variable 18 at class fromPicard.IlluminaBasecallsToSam static field DATA_TYPES_NO_BARCODE; tree IlluminaDataType[] )

