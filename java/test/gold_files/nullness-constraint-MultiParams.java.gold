Constraints:
SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 0 at class MultiParams extends type; tree <<missing tree>> within 
class MultiParams {
    
    MultiParams() {
        super();
    }
    
    void foo() {
        foo(new Object(), null);
    }
    
    void foo(Object a, String b) {
        a.toString();
    }
} )

SubtypeConstraint( Variable 1 at method MultiParams#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 0 at class MultiParams extends type; tree <<missing tree>> within 
class MultiParams {
    
    MultiParams() {
        super();
    }
    
    void foo() {
        foo(new Object(), null);
    }
    
    void foo(Object a, String b) {
        a.toString();
    }
} )

StubBoardUseConstraint(java.lang.Object,java.lang.Object#<init>():void,method MultiParams#<init>():V constraint position,null,List(),List(),List(),List(),List(),List(Constant(@nninf.quals.Nullable)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: method MultiParams#<init>():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@nninf.quals.Nullable)); 
)

SubtypeConstraint( Variable 2 at method MultiParams#foo():V receiver; tree <<missing tree>> within 
void foo() {
    foo(new Object(), null);
}Atm: @VarAnnot(2) MultiParams  <:  Variable 0 at class MultiParams extends type; tree <<missing tree>> within 
class MultiParams {
    
    MultiParams() {
        super();
    }
    
    void foo() {
        foo(new Object(), null);
    }
    
    void foo(Object a, String b) {
        a.toString();
    }
} )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method MultiParams#foo():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@nninf.quals.Nullable)); 
)

InequalityConstraint( context: method MultiParams#foo():V constraint position, Variable 6 at method MultiParams#foo():V creation 0; tree Object != Constant(@nninf.quals.Nullable) )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method MultiParams#foo():V constraint position; 
calledVp: Some(method MultiParams#foo(Ljava/lang/Object;Ljava/lang/String;):V); 
receiver: Variable 2 at method MultiParams#foo():V receiver; tree <<missing tree>> within 
void foo() {
    foo(new Object(), null);
}Atm: @VarAnnot(2) MultiParams; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: ( Variable 6 at method MultiParams#foo():V creation 0; tree Object, Literal(NULL_LITERAL, "null") ); 
result: List(); 
)

SubtypeConstraint( Variable 3 at method MultiParams#foo(Ljava/lang/Object;Ljava/lang/String;):V receiver; tree <<missing tree>> within 
void foo(Object a, String b) {
    a.toString();
}Atm: @VarAnnot(3) MultiParams  <:  Variable 0 at class MultiParams extends type; tree <<missing tree>> within 
class MultiParams {
    
    MultiParams() {
        super();
    }
    
    void foo() {
        foo(new Object(), null);
    }
    
    void foo(Object a, String b) {
        a.toString();
    }
} )

InequalityConstraint( context: method MultiParams#foo(Ljava/lang/Object;Ljava/lang/String;):V constraint position, Variable 4 at method MultiParams#foo(Ljava/lang/Object;Ljava/lang/String;):V parameter 0; tree Object != Constant(@nninf.quals.Nullable) )

StubBoardUseConstraint(java.lang.Object,java.lang.Object#toString():java.lang.String,method MultiParams#foo(Ljava/lang/Object;Ljava/lang/String;):V constraint position,Constant(@nninf.quals.NonNull),List(),List(),List(),List(),List(),List(Constant(@nninf.quals.NonNull)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: method MultiParams#foo(Ljava/lang/Object;Ljava/lang/String;):V constraint position; 
calledVp: None; 
receiver: Variable 4 at method MultiParams#foo(Ljava/lang/Object;Ljava/lang/String;):V parameter 0; tree Object; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@nninf.quals.NonNull)); 
)

