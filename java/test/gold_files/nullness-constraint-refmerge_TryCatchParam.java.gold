Constraints:
SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 0 at class TryCatchParam extends type; tree <<missing tree>> within 
class TryCatchParam {
    
    TryCatchParam() {
        super();
    }
    
    void test(String a) {
        Exception e = new Exception();
        try {
            if (true) {
                throw e;
            }
            a = "";
        } catch (Exception e2) {
            a = "";
        }
        a.toString();
    }
} )

SubtypeConstraint( Variable 1 at method TryCatchParam#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 0 at class TryCatchParam extends type; tree <<missing tree>> within 
class TryCatchParam {
    
    TryCatchParam() {
        super();
    }
    
    void test(String a) {
        Exception e = new Exception();
        try {
            if (true) {
                throw e;
            }
            a = "";
        } catch (Exception e2) {
            a = "";
        }
        a.toString();
    }
} )

SubtypeConstraint( Variable 2 at method TryCatchParam#test(Ljava/lang/String;):V receiver; tree <<missing tree>> within 
void test(String a) {
    Exception e = new Exception();
    try {
        if (true) {
            throw e;
        }
        a = "";
    } catch (Exception e2) {
        a = "";
    }
    a.toString();
}Atm: @VarAnnot(2) TryCatchParam  <:  Variable 0 at class TryCatchParam extends type; tree <<missing tree>> within 
class TryCatchParam {
    
    TryCatchParam() {
        super();
    }
    
    void test(String a) {
        Exception e = new Exception();
        try {
            if (true) {
                throw e;
            }
            a = "";
        } catch (Exception e2) {
            a = "";
        }
        a.toString();
    }
} )

InequalityConstraint( context: method TryCatchParam#test(Ljava/lang/String;):V constraint position, Variable 5 at method TryCatchParam#test(Ljava/lang/String;):V creation 0; tree Exception != Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Variable 5 at method TryCatchParam#test(Ljava/lang/String;):V creation 0; tree Exception  <:  Variable 4 at method TryCatchParam#test(Ljava/lang/String;):V local variable e(0); tree Exception )

InequalityConstraint( context: method TryCatchParam#test(Ljava/lang/String;):V constraint position, Variable 4 at method TryCatchParam#test(Ljava/lang/String;):V local variable e(0); tree Exception != Constant(@nninf.quals.Nullable) )

EqualityConstraint( RefinementVariable #6 Declared Variable: Variable 3 at method TryCatchParam#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: Set(RefinementVariable #8 Declared Variable: Variable 3 at method TryCatchParam#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: Set(RefinementVariable #9 Declared Variable: Variable 3 at method TryCatchParam#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: Set())) = Literal(STRING_LITERAL, "") )

SubtypeConstraint( Literal(STRING_LITERAL, "")  <:  Variable 3 at method TryCatchParam#test(Ljava/lang/String;):V parameter 0; tree String )

EqualityConstraint( RefinementVariable #7 Declared Variable: Variable 3 at method TryCatchParam#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: Set(RefinementVariable #8 Declared Variable: Variable 3 at method TryCatchParam#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: Set(RefinementVariable #9 Declared Variable: Variable 3 at method TryCatchParam#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: Set())) = Literal(STRING_LITERAL, "") )

SubtypeConstraint( RefinementVariable #6 Declared Variable: Variable 3 at method TryCatchParam#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: Set(RefinementVariable #8 Declared Variable: Variable 3 at method TryCatchParam#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: Set(RefinementVariable #9 Declared Variable: Variable 3 at method TryCatchParam#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: Set()))  <:  RefinementVariable #8 Declared Variable: Variable 3 at method TryCatchParam#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: Set(RefinementVariable #9 Declared Variable: Variable 3 at method TryCatchParam#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: Set()) )

SubtypeConstraint( RefinementVariable #7 Declared Variable: Variable 3 at method TryCatchParam#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: Set(RefinementVariable #8 Declared Variable: Variable 3 at method TryCatchParam#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: Set(RefinementVariable #9 Declared Variable: Variable 3 at method TryCatchParam#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: Set()))  <:  RefinementVariable #8 Declared Variable: Variable 3 at method TryCatchParam#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: Set(RefinementVariable #9 Declared Variable: Variable 3 at method TryCatchParam#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: Set()) )

SubtypeConstraint( RefinementVariable #8 Declared Variable: Variable 3 at method TryCatchParam#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: Set(RefinementVariable #9 Declared Variable: Variable 3 at method TryCatchParam#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: Set())  <:  Variable 3 at method TryCatchParam#test(Ljava/lang/String;):V parameter 0; tree String )

InequalityConstraint( context: method TryCatchParam#test(Ljava/lang/String;):V constraint position, RefinementVariable #8 Declared Variable: Variable 3 at method TryCatchParam#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: Set(RefinementVariable #9 Declared Variable: Variable 3 at method TryCatchParam#test(Ljava/lang/String;):V parameter 0; tree String IfTest: false mergedTo: Set()) != Constant(@nninf.quals.Nullable) )

