Constraints:
SubtypeConstraint( Variable 1 at class MyList class type parameter 0; tree E extends Object  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 1 at class MyList class type parameter 0; tree E extends Object  <:  Variable 0 at class MyList class type parameter bound 0 & 0; tree Object at position ((3,0)) within E extends Object )

SubtypeConstraint( Constant(@trusted.quals.Untrusted)  <:  Variable 2 at class MyList extends type; tree Object )

SubtypeConstraint( Variable 3 at method MyList#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 2 at class MyList extends type; tree Object )

StubBoardUseConstraint(java.lang.Object,java.lang.Object#<init>():void,method MyList#<init>():V constraint position,null,List(),List(),List(),List(),List(),List(Constant(@trusted.quals.Untrusted)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: method MyList#<init>():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@trusted.quals.Untrusted)); 
)

SubtypeConstraint( Variable 5 at class MyClass class type parameter 0; tree T extends String  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 5 at class MyClass class type parameter 0; tree T extends String  <:  Variable 4 at class MyClass class type parameter bound 0 & 0; tree String at position ((3,0)) within T extends String )

SubtypeConstraint( Constant(@trusted.quals.Untrusted)  <:  Variable 6 at class MyClass extends type; tree MyList within MyList<T> )

SubtypeConstraint( Variable 7 at method MyClass#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 6 at class MyClass extends type; tree MyList within MyList<T> )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method MyClass#<init>():V constraint position; 
calledVp: Some(method MyList#<init>():V); 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Variable 1 at class MyList class type parameter 0; tree E extends Object >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 0 at class MyList class type parameter bound 0 & 0; tree Object at position ((3,0)) within E extends Object) >; 
args: (  ); 
result: List(Variable 3 at method MyList#<init>():V return type; tree 
<init>() {
    super();
}); 
)

SubtypeConstraint( Variable 3 at method MyList#<init>():V return type; tree 
<init>() {
    super();
}  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 8 at method MyClass#m(Ljava/lang/String;):V receiver; tree MyClass<T>  <:  Variable 6 at class MyClass extends type; tree MyList within MyList<T> )

SubtypeConstraint( Variable 10 at method MyClass#context():V receiver; tree <<missing tree>> within 
void context() {
    String s = "mc";
    MyClass<String> myc;
    myc = new MyClass<String>();
    myc.m(s);
}Atm: @VarAnnot(10) MyClass<T extends String>  <:  Variable 6 at class MyClass extends type; tree MyList within MyList<T> )

SubtypeConstraint( Literal(STRING_LITERAL, "mc")  <:  Variable 11 at method MyClass#context():V local variable s(0); tree String )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method MyClass#context():V constraint position; 
calledVp: Some(method MyClass#<init>():V); 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Variable 5 at class MyClass class type parameter 0; tree T extends String >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 15 at method MyClass#context():V creation 0; tree String at position ((3,0)) within MyClass<String>) >; 
args: (  ); 
result: List(Variable 7 at method MyClass#<init>():V return type; tree 
<init>() {
    super();
}); 
)

EqualityConstraint( RefinementVariable #16 Declared Variable: Variable 12 at method MyClass#context():V local variable myc(0); tree MyClass within MyClass<String> IfTest: false mergedTo: (Set()) = Variable 14 at method MyClass#context():V creation 0; tree MyClass within MyClass<String> )

SubtypeConstraint( Variable 14 at method MyClass#context():V creation 0; tree MyClass within MyClass<String>  <:  Variable 12 at method MyClass#context():V local variable myc(0); tree MyClass within MyClass<String> )

SubtypeConstraint( Variable 9 at method MyClass#m(Ljava/lang/String;):V parameter 0; tree T  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( RefinementVariable #16 Declared Variable: Variable 12 at method MyClass#context():V local variable myc(0); tree MyClass within MyClass<String> IfTest: false mergedTo: (Set())  <:  Variable 12 at method MyClass#context():V local variable myc(0); tree MyClass within MyClass<String> )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method MyClass#context():V constraint position; 
calledVp: Some(method MyClass#m(Ljava/lang/String;):V); 
receiver: RefinementVariable #16 Declared Variable: Variable 12 at method MyClass#context():V local variable myc(0); tree MyClass within MyClass<String> IfTest: false mergedTo: (Set()); 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Variable 5 at class MyClass class type parameter 0; tree T extends String >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 13 at method MyClass#context():V local variable myc(0); tree String at position ((3,0)) within MyClass<String>) >; 
args: ( Variable 11 at method MyClass#context():V local variable s(0); tree String ); 
result: List(); 
)

