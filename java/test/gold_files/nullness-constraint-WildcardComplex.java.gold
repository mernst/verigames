Constraints:
SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 0 at class Collection class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within T0Atm: @VarAnnot(0) Object )

SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 2 at class List class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within T1Atm: @VarAnnot(2) Object )

SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 5 at class ArrayList class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within T1Atm: @VarAnnot(5) Object )

SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 7 at class ArrayList extends type; tree <<missing tree>> within 
class ArrayList<T1> implements List<T1> {
    
    ArrayList() {
        super();
    }
} )

SubtypeConstraint( Variable 9 at method ArrayList#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 7 at class ArrayList extends type; tree <<missing tree>> within 
class ArrayList<T1> implements List<T1> {
    
    ArrayList() {
        super();
    }
} )

SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 10 at class WildcardComplex class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within TAtm: @VarAnnot(10) Object )

SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 12 at class WildcardComplex extends type; tree <<missing tree>> within 
class WildcardComplex<T> {
    
    WildcardComplex() {
        super();
    }
    List<? extends Collection<T>> something;
    
    public static void method(String param) {
    }
} )

SubtypeConstraint( Variable 13 at method WildcardComplex#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 12 at class WildcardComplex extends type; tree <<missing tree>> within 
class WildcardComplex<T> {
    
    WildcardComplex() {
        super();
    }
    List<? extends Collection<T>> something;
    
    public static void method(String param) {
    }
} )

