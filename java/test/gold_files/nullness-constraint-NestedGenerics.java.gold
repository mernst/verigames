Constraints:
SubtypeConstraint( Variable 1 at class NestedGenerics class type parameter 0; tree X  <:  Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Variable 1 at class NestedGenerics class type parameter 0; tree X  <:  Variable 0 at class NestedGenerics class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within XAtm: @VarAnnot(0) Object )

SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 2 at class NestedGenerics extends type; tree <<missing tree>> within 
class NestedGenerics<X> {
    
    NestedGenerics() {
        super();
    }
    Map<String, List<Integer>> sm = new HashMap<String, List<Integer>>();
} )

SubtypeConstraint( Variable 11 at method NestedGenerics#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 2 at class NestedGenerics extends type; tree <<missing tree>> within 
class NestedGenerics<X> {
    
    NestedGenerics() {
        super();
    }
    Map<String, List<Integer>> sm = new HashMap<String, List<Integer>>();
} )

StubBoardUseConstraint(java.lang.Object,java.lang.Object#<init>():void,method NestedGenerics#<init>():V constraint position,null,List(),List(),List(),List(),List(),List(Constant(@nninf.quals.Nullable)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: method NestedGenerics#<init>():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@nninf.quals.Nullable)); 
)

StubBoardUseConstraint(java.util.HashMap,java.util.HashMap#<init>():void,class NestedGenerics field sm constraint position,null,List(),List(Constant(@nninf.quals.Nullable), Constant(@nninf.quals.Nullable)),List(),List(List(Constant(@nninf.quals.NonNull)), List(Constant(@nninf.quals.NonNull))),List(),List(Constant(@nninf.quals.Nullable)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: class NestedGenerics field sm constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Constant(@nninf.quals.Nullable), Constant(@nninf.quals.Nullable) >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 4 at class NestedGenerics field sm creation 0; tree String at position ((3,0)) within HashMap<String, List<Integer>>), List(Variable 5 at class NestedGenerics field sm creation 0; tree List at position ((3,1)) within HashMap<String, List<Integer>>) >; 
args: (  ); 
result: List(Constant(@nninf.quals.Nullable)); 
)

InequalityConstraint( context: class NestedGenerics field sm constraint position, Variable 3 at class NestedGenerics field sm creation 0; tree HashMap within HashMap<String, List<Integer>> != Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Variable 3 at class NestedGenerics field sm creation 0; tree HashMap within HashMap<String, List<Integer>>  <:  Variable 7 at class NestedGenerics field sm; tree Map within Map<String, List<Integer>> )

EqualityConstraint( Variable 8 at class NestedGenerics field sm; tree String at position ((3,0)) within Map<String, List<Integer>> = Variable 4 at class NestedGenerics field sm creation 0; tree String at position ((3,0)) within HashMap<String, List<Integer>> )

EqualityConstraint( Variable 9 at class NestedGenerics field sm; tree List at position ((3,1)) within Map<String, List<Integer>> = Variable 5 at class NestedGenerics field sm creation 0; tree List at position ((3,1)) within HashMap<String, List<Integer>> )

EqualityConstraint( Variable 10 at class NestedGenerics field sm; tree Integer at position ((3,1), (3,0)) within Map<String, List<Integer>> = Variable 6 at class NestedGenerics field sm creation 0; tree Integer at position ((3,1), (3,0)) within HashMap<String, List<Integer>> )

