Constraints:
SubtypeConstraint( Variable 2 at class WilcardInTypeParameter class type parameter 0; tree T extends List<?>  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 2 at class WilcardInTypeParameter class type parameter 0; tree T extends List<?>  <:  Variable 0 at class WilcardInTypeParameter class type parameter bound 0 & 0; tree List at position ((3,0)) within T extends List<?> )

SubtypeConstraint( Constant(@trusted.quals.Untrusted)  <:  Variable 3 at class WilcardInTypeParameter extends type; tree <<missing tree>> within 
class WilcardInTypeParameter<T extends List<?>> {
    
    WilcardInTypeParameter() {
        super();
    }
    
    private void m1(WilcardInTypeParameter<List<? extends String>> test) {
    }
} )

SubtypeConstraint( Variable 4 at method WilcardInTypeParameter#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 3 at class WilcardInTypeParameter extends type; tree <<missing tree>> within 
class WilcardInTypeParameter<T extends List<?>> {
    
    WilcardInTypeParameter() {
        super();
    }
    
    private void m1(WilcardInTypeParameter<List<? extends String>> test) {
    }
} )

SubtypeConstraint( Variable 5 at method WilcardInTypeParameter#m1(LWilcardInTypeParameter;):V receiver; tree <<missing tree>> within 
private void m1(WilcardInTypeParameter<List<? extends String>> test) {
}Atm: @VarAnnot(5) WilcardInTypeParameter<T extends List<? extends Object>>  <:  Variable 3 at class WilcardInTypeParameter extends type; tree <<missing tree>> within 
class WilcardInTypeParameter<T extends List<?>> {
    
    WilcardInTypeParameter() {
        super();
    }
    
    private void m1(WilcardInTypeParameter<List<? extends String>> test) {
    }
} )

