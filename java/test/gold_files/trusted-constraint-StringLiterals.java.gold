Constraints:
subtype constraint: Constant(@trusted.quals.Untrusted)  <:  Variable 0 at class Literals extends type; tree <<missing tree>> within 
class Literals {
    
    Literals() {
        super();
    }
    
    String m(String p) {
        return "ha";
    }
    
    void call() {
        String s = m("dude");
    }
}

subtype constraint: Variable 1 at method Literals#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 0 at class Literals extends type; tree <<missing tree>> within 
class Literals {
    
    Literals() {
        super();
    }
    
    String m(String p) {
        return "ha";
    }
    
    void call() {
        String s = m("dude");
    }
}

subtype constraint: Variable 3 at method Literals#m(Ljava/lang/String;):Ljava/lang/String; receiver; tree <<missing tree>> within 
String m(String p) {
    return "ha";
}Atm: @VarAnnot(3) Literals  <:  Variable 0 at class Literals extends type; tree <<missing tree>> within 
class Literals {
    
    Literals() {
        super();
    }
    
    String m(String p) {
        return "ha";
    }
    
    void call() {
        String s = m("dude");
    }
}

subtype constraint: Literal(STRING_LITERAL, "ha")  <:  Variable 2 at method Literals#m(Ljava/lang/String;):Ljava/lang/String; return type; tree String

subtype constraint: Variable 5 at method Literals#call():V receiver; tree <<missing tree>> within 
void call() {
    String s = m("dude");
}Atm: @VarAnnot(5) Literals  <:  Variable 0 at class Literals extends type; tree <<missing tree>> within 
class Literals {
    
    Literals() {
        super();
    }
    
    String m(String p) {
        return "ha";
    }
    
    void call() {
        String s = m("dude");
    }
}

checkers.inference.InstanceMethodCallConstraint(
contextVp: method Literals#call():V constraint position; 
calledVp: method Literals#m(Ljava/lang/String;):Ljava/lang/String;; 
receiver: Variable 5 at method Literals#call():V receiver; tree <<missing tree>> within 
void call() {
    String s = m("dude");
}Atm: @VarAnnot(5) Literals; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: ( Literal(STRING_LITERAL, "dude") ); 
result: List(Variable 2 at method Literals#m(Ljava/lang/String;):Ljava/lang/String; return type; tree String); 
)

subtype constraint: Variable 2 at method Literals#m(Ljava/lang/String;):Ljava/lang/String; return type; tree String  <:  Variable 6 at method Literals#call():V local variable s(0); tree String

