Constraints:
SubtypeConstraint( Constant(@nninf.quals.Nullable)  <:  Variable 0 at class SimpleConstructor extends type; tree <<missing tree>> within 
class SimpleConstructor {
    private String y;
    
    public SimpleConstructor() {
        super();
        y = null;
    }
    
    public SimpleConstructor(String in) {
        super();
        y = in;
    }
    
    public static void noArg() {
        SimpleConstructor simpCon = new SimpleConstructor();
    }
    
    public static void oneArg() {
        SimpleConstructor simpCon = new SimpleConstructor("t");
    }
} )

SubtypeConstraint( Variable 1 at method SimpleConstructor#<init>():V return type; tree 
public <init>() {
    super();
    y = null;
}  <:  Variable 0 at class SimpleConstructor extends type; tree <<missing tree>> within 
class SimpleConstructor {
    private String y;
    
    public SimpleConstructor() {
        super();
        y = null;
    }
    
    public SimpleConstructor(String in) {
        super();
        y = in;
    }
    
    public static void noArg() {
        SimpleConstructor simpCon = new SimpleConstructor();
    }
    
    public static void oneArg() {
        SimpleConstructor simpCon = new SimpleConstructor("t");
    }
} )

SubtypeConstraint( RefinementVariable #5 Declared Variable: Variable 4 at class SimpleConstructor field y; tree String IfTest: false mergedTo: Set()  <:  Variable 4 at class SimpleConstructor field y; tree String )

checkers.inference.FieldAssignmentConstraint(
contextVp: method SimpleConstructor#<init>():V constraint position; 
calledVp: class SimpleConstructor field y; 
receiver: Constant(@nninf.quals.Nullable); 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: ( Literal(NULL_LITERAL, "null") ); 
result: List(); 
)

EqualityConstraint( RefinementVariable #5 Declared Variable: Variable 4 at class SimpleConstructor field y; tree String IfTest: false mergedTo: Set() = Literal(NULL_LITERAL, "null") )

SubtypeConstraint( Literal(NULL_LITERAL, "null")  <:  Variable 4 at class SimpleConstructor field y; tree String )

SubtypeConstraint( Variable 2 at method SimpleConstructor#<init>(Ljava/lang/String;):V return type; tree 
public <init>(String in) {
    super();
    y = in;
}  <:  Variable 0 at class SimpleConstructor extends type; tree <<missing tree>> within 
class SimpleConstructor {
    private String y;
    
    public SimpleConstructor() {
        super();
        y = null;
    }
    
    public SimpleConstructor(String in) {
        super();
        y = in;
    }
    
    public static void noArg() {
        SimpleConstructor simpCon = new SimpleConstructor();
    }
    
    public static void oneArg() {
        SimpleConstructor simpCon = new SimpleConstructor("t");
    }
} )

SubtypeConstraint( RefinementVariable #6 Declared Variable: Variable 4 at class SimpleConstructor field y; tree String IfTest: false mergedTo: Set()  <:  Variable 4 at class SimpleConstructor field y; tree String )

checkers.inference.FieldAssignmentConstraint(
contextVp: method SimpleConstructor#<init>(Ljava/lang/String;):V constraint position; 
calledVp: class SimpleConstructor field y; 
receiver: Constant(@nninf.quals.Nullable); 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: ( Variable 3 at method SimpleConstructor#<init>(Ljava/lang/String;):V parameter 0; tree String ); 
result: List(); 
)

EqualityConstraint( RefinementVariable #6 Declared Variable: Variable 4 at class SimpleConstructor field y; tree String IfTest: false mergedTo: Set() = Variable 3 at method SimpleConstructor#<init>(Ljava/lang/String;):V parameter 0; tree String )

SubtypeConstraint( Variable 3 at method SimpleConstructor#<init>(Ljava/lang/String;):V parameter 0; tree String  <:  Variable 4 at class SimpleConstructor field y; tree String )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method SimpleConstructor#noArg():V constraint position; 
calledVp: method SimpleConstructor#<init>():V; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Variable 1 at method SimpleConstructor#<init>():V return type; tree 
public <init>() {
    super();
    y = null;
}); 
)

InequalityConstraint( context: method SimpleConstructor#noArg():V constraint position, Variable 8 at method SimpleConstructor#noArg():V creation 0; tree SimpleConstructor != Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Variable 8 at method SimpleConstructor#noArg():V creation 0; tree SimpleConstructor  <:  Variable 7 at method SimpleConstructor#noArg():V local variable simpCon(0); tree SimpleConstructor )

SubtypeConstraint( Literal(STRING_LITERAL, "t")  <:  Variable 3 at method SimpleConstructor#<init>(Ljava/lang/String;):V parameter 0; tree String )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method SimpleConstructor#oneArg():V constraint position; 
calledVp: method SimpleConstructor#<init>(Ljava/lang/String;):V; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: ( Literal(STRING_LITERAL, "t") ); 
result: List(Variable 2 at method SimpleConstructor#<init>(Ljava/lang/String;):V return type; tree 
public <init>(String in) {
    super();
    y = in;
}); 
)

InequalityConstraint( context: method SimpleConstructor#oneArg():V constraint position, Variable 10 at method SimpleConstructor#oneArg():V creation 0; tree SimpleConstructor != Constant(@nninf.quals.Nullable) )

SubtypeConstraint( Variable 10 at method SimpleConstructor#oneArg():V creation 0; tree SimpleConstructor  <:  Variable 9 at method SimpleConstructor#oneArg():V local variable simpCon(0); tree SimpleConstructor )

