Constraints:
SubtypeConstraint( Variable 1 at class Test class type parameter 0; tree A  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 1 at class Test class type parameter 0; tree A  <:  Variable 0 at class Test class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within AAtm: @VarAnnot(0) Object )

SubtypeConstraint( Variable 3 at class Test class type parameter 1; tree B  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 3 at class Test class type parameter 1; tree B  <:  Variable 2 at class Test class type parameter bound 1 & 0; tree <<missing tree>> at position ((3,1)) within BAtm: @VarAnnot(2) Object )

SubtypeConstraint( Constant(@trusted.quals.Untrusted)  <:  Variable 4 at class Test extends type; tree <<missing tree>> within 
class Test<A, B> {
    
    Test() {
        super();
    }
    
    void method() {
    }
} )

SubtypeConstraint( Variable 5 at method Test#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 4 at class Test extends type; tree <<missing tree>> within 
class Test<A, B> {
    
    Test() {
        super();
    }
    
    void method() {
    }
} )

StubBoardUseConstraint(java.lang.Object,java.lang.Object#<init>():void,method Test#<init>():V constraint position,null,List(),List(),List(),List(),List(),List(Constant(@trusted.quals.Untrusted)))

checkers.inference.InstanceMethodCallConstraint(
contextVp: method Test#<init>():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@trusted.quals.Untrusted)); 
)

SubtypeConstraint( Variable 6 at method Test#method():V receiver; tree <<missing tree>> within 
void method() {
}Atm: @VarAnnot(6) Test<A extends Object, B extends Object>  <:  Variable 4 at class Test extends type; tree <<missing tree>> within 
class Test<A, B> {
    
    Test() {
        super();
    }
    
    void method() {
    }
} )

SubtypeConstraint( Variable 8 at class Harness class type parameter 0; tree C  <:  Constant(@trusted.quals.Untrusted) )

SubtypeConstraint( Variable 8 at class Harness class type parameter 0; tree C  <:  Variable 7 at class Harness class type parameter bound 0 & 0; tree <<missing tree>> at position ((3,0)) within CAtm: @VarAnnot(7) Object )

SubtypeConstraint( Variable 10 at class Harness class type parameter 1; tree D  <:  Variable 9 at class Harness class type parameter bound 1 & 0; tree <<missing tree>> at position ((3,1)) within DAtm: @VarAnnot(9) Object )

SubtypeConstraint( Constant(@trusted.quals.Untrusted)  <:  Variable 11 at class Harness extends type; tree <<missing tree>> within 
class Harness<C, D> {
    
    Harness() {
        super();
    }
    
    void context1(Test<String, D> td) {
        td.method();
    }
} )

SubtypeConstraint( Variable 12 at method Harness#<init>():V return type; tree 
<init>() {
    super();
}  <:  Variable 11 at class Harness extends type; tree <<missing tree>> within 
class Harness<C, D> {
    
    Harness() {
        super();
    }
    
    void context1(Test<String, D> td) {
        td.method();
    }
} )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method Harness#<init>():V constraint position; 
calledVp: None; 
receiver: null; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: <  >; 
methodTypeArgs: <  >; 
classTypeArgs: <  >; 
args: (  ); 
result: List(Constant(@trusted.quals.Untrusted)); 
)

SubtypeConstraint( Variable 13 at method Harness#context1(LTest;):V receiver; tree <<missing tree>> within 
void context1(Test<String, D> td) {
    td.method();
}Atm: @VarAnnot(13) Harness<C extends Object, D extends Object>  <:  Variable 11 at class Harness extends type; tree <<missing tree>> within 
class Harness<C, D> {
    
    Harness() {
        super();
    }
    
    void context1(Test<String, D> td) {
        td.method();
    }
} )

SubtypeConstraint( Variable 10 at class Harness class type parameter 1; tree D  <:  Constant(@trusted.quals.Untrusted) )

checkers.inference.InstanceMethodCallConstraint(
contextVp: method Harness#context1(LTest;):V constraint position; 
calledVp: Some(method Test#method():V); 
receiver: Variable 14 at method Harness#context1(LTest;):V parameter 0; tree Test within Test<String, D>; 
methodTypeParamLBs: <  >; 
classTypeParamLBs: < Variable 1 at class Test class type parameter 0; tree A, Variable 3 at class Test class type parameter 1; tree B >; 
methodTypeArgs: <  >; 
classTypeArgs: < List(Variable 15 at method Harness#context1(LTest;):V parameter 0; tree String at position ((3,0)) within Test<String, D>), List(Variable 9 at class Harness class type parameter bound 1 & 0; tree <<missing tree>> at position ((3,1)) within DAtm: @VarAnnot(9) Object) >; 
args: (  ); 
result: List(); 
)

