===========================================================================

Drew Dean wants a short video of 2-3 minutes that focuses on
 * how the problem is solved today (command-line tool)
 * gameplay, including:
    * basic mechanics
    * what people are thinking about when solving the game
    * switching between boards within a level
    * advancing between levels within a game
    * exceptions to the laws of physics
 * translation back to a verified program (use command-line tool to verify
   automatically-annotated program)

He prefers to handle the motivation, impacts, importance to the military,
etc. parts of the pitch.

===========================================================================

Proposed video script:

----

Caption:  Problem:  buggy, insecure software
Image:  [no good ideas.  Just a black background?  Show a hacker gaining
access to software, or a real-world effect of a (security) bug?]

----

Caption:  How the problem is solved today

Video:
Show an editor buffer with code.
Opens a command line, runs a (pluggable) type-checker from the Checker Framework.
Lots of errors stream by.
Go to the editor, make a change, re-run the type-checker.

Voiceover:
A skilled programmer runs a program verification tool and incrementally
adds code annotations or fixes coding errors.  This process is slow and
uneconomic.

----

Caption:
Our approach

Diagram:
code -> game -> play game -> verified software

Voiceover:
Our approach automatically converts a program verification problem into a
game that can be played in a browser or on a phone.  When a player finishes
the game, the final configuration of the level can be translated into a
proof of correctness for the original program.

----

Video: the game being played
[Need to decide exactly what boards are shown and exactly what clicks are
done, illustrating the voiceover.]

In the game, balls roll through a network of interconnected pipes.  There
are narrow pipes and wide pipes, and there are small balls and large balls.
A small ball can roll through any pipe.  A large ball only fits through a
wide pipe.  A large ball gets stuck if it tries to roll into a narrow pipe.
Your job is to make sure that no ball gets stuck.

You can control the width of each pipe segment.  Click on a pipe segment to
change its width from wide to narrow or vice-versa.

The game is not trivial, because the player does not have complete freedom
to change widths.  Some pipes have pinch points, which are impassable by
large balls even if the pipe segment is wide.  And, some balls are always wide.

The game consists of multiple boards in a level, and multiple levels in a
world.  A modification that makes progress on one board may cause a problem
on another board.  There may be multiple solutions.
[Show multiple solutions here.]

To solve the game, the player takes a high-level view of how the balls roll
through the pipe network, and the relationships among different parts of
the network.

When you finish a level, you move on to another level in the world.
Eventually, the entire world is solved.

----

Video:
Show the solved game and the program, on the same screen
Somehow transition to showing the solved game flowing into the program
The program obtains annotations, which can be highlighted in red.
Show the Checker Framework being run from the command line, with
"compilation succeeded" as the output.

Voiceover:
A solution to the game can be automatically converted into a proof of
correctness for the program.  More specifically, it is converted into a set
of annotations, which are akin to program specifications or contracts.
These annotations are guaranteed to be correct.  An external tool, called
the Checker Framework, can independently verify the program against them.

----

[Discuss the mapping between program elements and game elements?]
[We don't have time for this in a 3-minute video.]

----

[Show exceptions to the laws of physics?  Drew Dean would like to see this
in the video.]
[Working this into a 3-minute video will be difficult.]

===========================================================================

Drew Dean agrees with my characterization of the video, below, and adds:

  Your impression is spot on, and the violating the laws of physics should
  lower the score (it would be nice if you could briefly work that into the
  video, if there are two solutions of which complies with the laws of
  physics and the other doesn't).

Video specifics

Drew-

We're working on the video you requested.  We want to make sure it fits
your needs, without wasting our time.

There are a lot of points that could be made in your pitch and/or the
video, such as:
 * statistics about security problems, and about the amount of existing
   code that has not been verified
 * possibility of a pan-university student competition to resolve as much
   of the Linux kernel as possible
 * list of security bugs that could be addressed with slight
   modification of the framework

My impression (but please correct me if I am wrong!) is that you want a
short video that focuses on
 * how the problem is solved today (command-line tool)
 * gameplay, including:
    * basic mechanics
    * what people are thinking about when solving the game
    * switching between boards within a level
    * advancing between levels within a game
 * translation back to a verified program (use command-line tool to verify
   automatically-annotated program)

My impression is that you prefer to handle the motivation, impacts,
importance to the military, etc. parts of the pitch.

There are some intermediate topics that could be included or excluded:
 * collaboration aspects that enable teams to work together through problem
   subdivision or re-solving partially solved problems.
 * human insight into insoluble problems:  exceptions to the rules of
   physics show a programmer where to focus.

If you can please offer some guidance, that would be a big help in
preventing us from creating a beautiful and compelling video that isn't
what you want or need.

Thanks!
                    -Mike

===========================================================================

Zoran's proposal:

1.       introduction on the current way these bugs are tracked, either through
some emacs buffer thing, or the output of the state-of-the-art code checker.

2.       Point to some jaw dropping statistics on important code used daily
without any certainty of robustness.  Make it security heavy because that’s
what they want to hear.

3.       A didactic example of play introducing the basic mechanics and what
the user is thinking about when solving the puzzle

4.       Switch to a more complex example with nesting, dependency of pipes
across multiple frames, etc.

5.       Point to a collaborative aspect that enables teams to work together
through problem subdivision or resolving partially solved problems.

6.       Show a largeish code base that we were able to resolve (if that
actually is the case).

7.       Point to a possibility of a pan-univresity student competition to
resolve as much of the linux kernel as possible

8.       Show a list of top 25 security bugs that could be addressed with
slight modification of the framework

9.       (optional) point to other problems like threading etc that would need
to be addressed with the larger program just so it does not look like we’ve
already solved it, so that they feel justify to fund the program for at least
3-4 years.

What works best (from our countless siggraph video experiences) is writing out
all the text first, making sure that it work fits in the planned time, and then
generate video cuts that fit optimally with text.  I suggest we work on that as
woon as we agree on the rough outline.  Please add items to this list, suggest
removal or edit.  Seth could you create a google doc  so that all comments and
edits are tracked.

===========================================================================
